<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cassandra</name>
    </assembly>
    <members>
        <member name="F:Cassandra.AsyncResultNoResult._owner">
            <summary>
            The object which started the operation.
            </summary>
        </member>
        <member name="F:Cassandra.AsyncResultNoResult._sender">
            <summary>
            The object which is a source of the operation.
            </summary>
        </member>
        <member name="F:Cassandra.AsyncResultNoResult._tag">
            <summary>
            The tag object 
            </summary>
        </member>
        <member name="F:Cassandra.AsyncResultNoResult._operationId">
            <summary>
            Used to verify the BeginXXX and EndXXX calls match.
            </summary>
        </member>
        <member name="T:Cassandra.ITypeAdapter">
            <summary>
            Represents a adapter to convert a Cassandra type to a CLR type
            </summary>
        </member>
        <member name="T:Cassandra.BoundStatement">
            <summary>
             A prepared statement with values bound to the bind variables. <p> Once a
             BoundStatement has values for all the variables of the
             <see cref="P:Cassandra.BoundStatement.PreparedStatement"/> it has been created from, it can executed
             (through <see cref="M:Cassandra.ISession.Execute(Cassandra.IStatement)"/>). </p><p> The values of a BoundStatement
             can be set by either index or name. When setting them by name, names follow
             the case insensitivity rules explained in <link>ColumnDefinitions</link>.
             Note-worthily, if multiple bind variables correspond to the same column (as
             would be the case if you prepare <c>SELECT * FROM t WHERE x &gt; ? AND x &lt; ?</c>), 
             you will have to set values by indexes (or the <c>PreparedStatement.Bind(object[])</c>
             method) as the methods to set by name only allows to set the first prepared
             occurrence of the column.</p>
            <seealso cref="T:Cassandra.PreparedStatement"/>
            </summary>
        </member>
        <member name="T:Cassandra.Statement">
            <summary>
            Base class for statements that contains the options.
            </summary>
        </member>
        <member name="T:Cassandra.IStatement">
            <summary>
             An executable query.
             This represents either a <see cref="T:Cassandra.SimpleStatement"/>, a <see cref="T:Cassandra.BoundStatement"/> or a
             <see cref="T:Cassandra.BoundStatement"/> along with the query options (consistency level,
             whether to trace the query, ...).
            </summary>
        </member>
        <member name="M:Cassandra.IStatement.DisableTracing">
            <summary>
             Disable tracing for the statement.
            </summary>
        </member>
        <member name="M:Cassandra.IStatement.EnableTracing(System.Boolean)">
            <summary>
             Enables tracing for the statement
            </summary>
        </member>
        <member name="M:Cassandra.IStatement.SetConsistencyLevel(System.Nullable{Cassandra.ConsistencyLevel})">
            <summary>
             Sets the consistency level for the query. <p> The default consistency level,
             if this method is not called, is ConsistencyLevel.ONE.</p>
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.ConsistencyLevel">
            <summary>
            Gets the consistency level for this query.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.IsTracing">
            <summary>
             Gets whether tracing is enabled for this query or not.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.PageSize">
            <summary>
            Gets query's page size.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.RetryPolicy">
            <summary>
             Gets the retry policy sets for this query, if any.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.RoutingKey">
            <summary>
             The routing key (in binary raw form) to use for token aware routing of this
             query. <p> The routing key is optional in the sense that implementers are
             free to return <c>null</c>. The routing key is an hint used for token
             aware routing (see
             <link>TokenAwarePolicy</link>), and if
             provided should correspond to the binary value for the query partition key.
             However, not providing a routing key never causes a query to fail and if the
             load balancing policy used is not token aware, then the routing key can be
             safely ignored.</p>
            </summary>
        </member>
        <member name="M:Cassandra.Statement.SetValues(System.Object[])">
            <summary>
             Bound values to the variables of this statement. This method provides a
             convenience to bound all the variables of the <c>BoundStatement</c> in
             one call.
            </summary>
            <param name="values"> the values to bind to the variables of the newly
             created BoundStatement. The first element of <c>values</c> will 
             be bound to the first bind variable,
             etc.. It is legal to provide less values than the statement has bound
             variables. In that case, the remaining variable need to be bound before
             execution. If more values than variables are provided however, an
             IllegalArgumentException wil be raised. </param>
            
            <returns>this bound statement. </returns>
        </member>
        <member name="M:Cassandra.Statement.SetConsistencyLevel(System.Nullable{Cassandra.ConsistencyLevel})">
            <summary>
             Sets the consistency level for the query. <p> The default consistency level,
             if this method is not called, is ConsistencyLevel.ONE.</p>
            </summary>
            <param name="consistency"> the consistency level to set. </param>
            
            <returns>this <c>Query</c> object.</returns>
        </member>
        <member name="M:Cassandra.Statement.SetSerialConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
            Sets the serial consistency level for the query.
               The serial consistency level is only used by conditional updates (so INSERT, UPDATE
            and DELETE with an IF condition). For those, the serial consistency level defines
            the consistency level of the serial phase (or "paxos" phase) while the
            normal consistency level defines the consistency for the "learn" phase, i.e. what
            type of reads will be guaranteed to see the update right away. For instance, if
            a conditional write has a regular consistency of QUORUM (and is successful), then a
            QUORUM read is guaranteed to see that write. But if the regular consistency of that
            write is ANY, then only a read with a consistency of SERIAL is guaranteed to see it
            (even a read with consistency ALL is not guaranteed to be enough).
            </summary>
            <param name="serialConsistency">Can be set only to ConsistencyLevel.Serial or 
            ConsistencyLevel.LocalSerial. Setting it to ConsistencyLevel.Serial guarantees full 
            linearizability while ConsistencyLevel.LocalSerial guarantees it only in the local datacenter. </param>
            <returns>this <c>Query</c> object.</returns>
        </member>
        <member name="M:Cassandra.Statement.EnableTracing(System.Boolean)">
            <summary>
             Enable tracing for this query. By default (i.e. unless you call this method),
             tracing is not enabled.
            </summary>
            
            <returns>this <c>Query</c> object.</returns>
        </member>
        <member name="M:Cassandra.Statement.SetRetryPolicy(Cassandra.IRetryPolicy)">
            <summary>
             Sets the retry policy to use for this query. <p> The default retry policy, if
             this method is not called, is the one returned by
             <link>Policies#RetryPolicy</link> in the
             cluster configuration. This method is thus only useful in case you want to
             punctually override the default policy for this request.</p>
            </summary>
            <param name="policy"> the retry policy to use for this query. </param>
            
            <returns>this <c>Query</c> object.</returns>
        </member>
        <member name="M:Cassandra.Statement.SetPageSize(System.Int32)">
             <summary>
             Sets the page size for this query.
             The page size controls how much resulting rows will be retrieved
             simultaneously (the goal being to avoid loading too much results
             in memory for queries yielding large results). Please note that
             while value as low as 1 can be used, it is highly discouraged to
             use such a low value in practice as it will yield very poor
             performance. If in doubt, leaving the default is probably a good
             idea.
             <p>
             Also note that only {@code SELECT} queries ever make use of that
             setting.
             </p>
            
             @param fetchSize the fetch size to use. If {@code fetchSize &lt;= 0},
             the default fetch size will be used. To disable paging of the
             result set, use {@code fetchSize == Integer.MAX_VALUE}.
             @return this {@code Statement} object.
             </summary>
             <param name="pageSize">the page size to use. If set to 0 or less, the default value will be used.
             To disable paging of the result set, use int.MaxValue</param>
             <returns>this <c>Query</c> object.</returns>
        </member>
        <member name="P:Cassandra.Statement.SerialConsistencyLevel">
            <summary>
            Gets the serial consistency level for this query.
            </summary>        
        </member>
        <member name="P:Cassandra.Statement.RoutingKey">
            <summary>
             The routing key (in binary raw form) to use for token aware routing of this
             query. <p> The routing key is optional in the sense that implementers are
             free to return <c>null</c>. The routing key is an hint used for token
             aware routing (see
             <link>TokenAwarePolicy</link>), and if
             provided should correspond to the binary value for the query partition key.
             However, not providing a routing key never causes a query to fail and if the
             load balancing policy used is not token aware, then the routing key can be
             safely ignored.</p>
            </summary>
            <returns>the routing key for this query or <c>null</c>.</returns>
        </member>
        <member name="M:Cassandra.BoundStatement.#ctor(Cassandra.PreparedStatement)">
            <summary>
             Creates a new <c>BoundStatement</c> from the provided prepared
             statement.
            </summary>
            <param name="statement"> the prepared statement from which to create a <c>BoundStatement</c>.</param>
        </member>
        <member name="M:Cassandra.BoundStatement.SetRoutingKey(Cassandra.RoutingKey[])">
            <summary>
             Set the routing key for this query. This method allows to manually
             provide a routing key for this BoundStatement. It is thus optional since the routing
             key is only an hint for token aware load balancing policy but is never
             mandatory.
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose the routing key.</param>
        </member>
        <member name="P:Cassandra.BoundStatement.PreparedStatement">
            <summary>
             Gets the prepared statement on which this BoundStatement is based.
            </summary>
        </member>
        <member name="P:Cassandra.BoundStatement.RoutingKey">
            <summary>
             Gets the routing key for this bound query. <p> This method will return a
             non-<c>null</c> value if: <ul> <li>either all the TableColumns composing the
             partition key are bound variables of this <c>BoundStatement</c>. The
             routing key will then be built using the values provided for these partition
             key TableColumns.</li> <li>or the routing key has been set through
             <c>PreparedStatement.SetRoutingKey</c> for the
             <see cref="P:Cassandra.BoundStatement.PreparedStatement"/> this statement has been built from.</li> </ul>
             Otherwise, <c>null</c> is returned.</p> <p> Note that if the routing key
             has been set through <link>PreparedStatement.SetRoutingKey</link>, that value
             takes precedence even if the partition key is part of the bound variables.</p>
            </summary>
        </member>
        <member name="T:Cassandra.Builder">
            <summary>
             Helper class to build <link>Cluster</link> instances.
            </summary>
        </member>
        <member name="T:Cassandra.IInitializer">
            <summary>
             Initializer for <link>Cluster</link> instances. <p> If you want to create a
             new <c>Cluster</c> instance programmatically, then it is advised to use
             <link>Cluster.Builder</link> (obtained through the
             <link>Cluster#builder</link> method).</p> <p> But it is also possible to
             implement a custom <c>Initializer</c> that retrieve initialization from
             a web-service or from a configuration file for instance.</p>
            </summary>
        </member>
        <member name="M:Cassandra.IInitializer.GetConfiguration">
            <summary>
             The configuration to use for the new cluster. <p> Note that some
             configuration can be modified after the cluster initialization but some other
             cannot. In particular, the ones that cannot be change afterwards includes:
             <ul> <li>the port use to connect to Cassandra nodes (see
             <link>ProtocolOptions</link>).</li> <li>the policies used (see
             <link>Policies</link>).</li> <li>the authentication info provided (see
             <link>Configuration</link>).</li> <li>whether metrics are enabled (see
             <link>Configuration</link>).</li> </ul></p>
            </summary>
        </member>
        <member name="P:Cassandra.IInitializer.ContactPoints">
            <summary>
             Gets the initial Cassandra hosts to connect to.See
             <link>Builder.AddContactPoint</link> for more details on contact
            </summary>
        </member>
        <member name="M:Cassandra.Builder.GetConfiguration">
            <summary>
             The configuration that will be used for the new cluster. <p> You <b>should
             not</b> modify this object directly as change made to the returned object may
             not be used by the cluster build. Instead, you should use the other methods
             of this <c>Builder</c></p>.
            </summary>
            
            <returns>the configuration to use for the new cluster.</returns>
        </member>
        <member name="M:Cassandra.Builder.WithPort(System.Int32)">
            <summary>
             The port to use to connect to the Cassandra host. If not set through this
             method, the default port (9042) will be used instead.
            </summary>
            <param name="port"> the port to set. </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithQueryOptions(Cassandra.QueryOptions)">
            <summary>
            Sets the QueryOptions to use for the newly created Cluster.
            
            If no query options are set through this method, default query
            options will be used.
            </summary>
            <param name="options">the QueryOptions to use.</param>
            <returns>this Builder.</returns>
        </member>
        <member name="M:Cassandra.Builder.WithCompression(Cassandra.CompressionType)">
            <summary>
             Sets the compression to use for the transport.
            </summary>
            <param name="compression"> the compression to set </param>
            
            <returns>this Builder <see>ProtocolOptions.Compression</see></returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoint(System.String)">
            <summary>
             Adds a contact point. Contact points are addresses of Cassandra nodes that
             the driver uses to discover the cluster topology. Only one contact point is
             required (the driver will retrieve the address of the other nodes
             automatically), but it is usually a good idea to provide more than one
             contact point, as if that unique contact point is not available, the driver
             won't be able to initialize itself correctly.'
            </summary>
            <param name="address"> the address of the node to connect to </param>
            
            <returns>this Builder </returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoints(System.String[])">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point
             </param>
            
            <returns>this Builder </returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoints(System.Net.IPAddress[])">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point
             </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithLoadBalancingPolicy(Cassandra.ILoadBalancingPolicy)">
            <summary>
             Configure the load balancing policy to use for the new cluster. <p> If no
             load balancing policy is set through this method,
             <link>Policies.DefaultLoadBalancingPolicy</link> will be used instead.</p>
            </summary>
            <param name="policy"> the load balancing policy to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithReconnectionPolicy(Cassandra.IReconnectionPolicy)">
            <summary>
             Configure the reconnection policy to use for the new cluster. <p> If no
             reconnection policy is set through this method,
             <link>Policies.DefaultReconnectionPolicy</link> will be used instead.</p>
            </summary>
            <param name="policy"> the reconnection policy to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithRetryPolicy(Cassandra.IRetryPolicy)">
            <summary>
             Configure the retry policy to use for the new cluster. <p> If no retry policy
             is set through this method, <link>Policies.DefaultRetryPolicy</link> will
             be used instead.</p>
            </summary>
            <param name="policy"> the retry policy to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithConnectionString(System.String)">
            <summary>
             Configure the cluster by applying settings from ConnectionString. 
            </summary>
            <param name="connectionString"> the ConnectionString to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithCredentials(System.String,System.String)">
            <summary>
             Uses the provided credentials when connecting to Cassandra hosts. <p> This
             should be used if the Cassandra cluster has been configured to use the
             <c>PasswordAuthenticator</c>. If the the default <c>*
             AllowAllAuthenticator</c> is used instead, using this method has no effect.</p>
            </summary>
            <param name="username"> the user name to use to login to Cassandra hosts.</param>
            <param name="password"> the password corresponding to </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithAuthProvider(Cassandra.IAuthProvider)">
            <summary>
             Use the specified AuthProvider when connecting to Cassandra hosts. <p> Use
             this method when a custom authentication scheme is in place. You shouldn't
             call both this method and {@code withCredentials}' on the same
             <c>Builder</c> instance as one will supercede the other</p>
            </summary>
            <param name="authProvider"> the <link>AuthProvider"></link> to use to login to Cassandra hosts.</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithoutRowSetBuffering">
            <summary>
             Disables row set buffering for the created cluster (row set buffering is enabled by
             default otherwise).
            </summary>
            
            <returns>this builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithQueryTimeout(System.Int32)">
            <summary>
             Sets the timeout for a single query within created cluster.
             After the expiry of the timeout, query will be aborted.
             Default timeout value is set to <c>Infinity</c>
            </summary>
            <param name="queryAbortTimeout">Timeout specified in milliseconds.</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithDefaultKeyspace(System.String)">
            <summary>
             Sets default keyspace name for the created cluster.
            </summary>
            <param name="defaultKeyspace">Default keyspace name.</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithSSL">
            <summary>
             Enables the use of SSL for the created Cluster. Calling this method will use default SSL options. 
            </summary>
            <remarks>
            If SSL is enabled, the driver will not connect to any
            Cassandra nodes that doesn't have SSL enabled and it is strongly
            advised to enable SSL on every Cassandra node if you plan on using
            SSL in the driver. Note that SSL certificate common name(CN) on Cassandra node must match Cassandra node hostname.
            </remarks>
            <returns>this builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithSSL(Cassandra.SSLOptions)">
            <summary>
             Enables the use of SSL for the created Cluster using the provided options. 
            </summary>
            <remarks>
            If SSL is enabled, the driver will not connect to any
            Cassandra nodes that doesn't have SSL enabled and it is strongly
            advised to enable SSL on every Cassandra node if you plan on using
            SSL in the driver. Note that SSL certificate common name(CN) on Cassandra node must match Cassandra node hostname.
            </remarks>
            <param name="sslOptions">SSL options to use.</param>
            <returns>this builder</returns>        
        </member>
        <member name="M:Cassandra.Builder.Build">
            <summary>
             Build the cluster with the configured set of initial contact points and
             policies. This is a shorthand for <c>Cluster.buildFrom(this)</c>.
            </summary>
            
            <returns>the newly build Cluster instance. </returns>
        </member>
        <member name="P:Cassandra.Builder.PoolingOptions">
            <summary>
             The pooling options used by this builder.
            </summary>
            
            <returns>the pooling options that will be used by this builder. You can use
             the returned object to define the initial pooling options for the built
             cluster.</returns>
        </member>
        <member name="P:Cassandra.Builder.SocketOptions">
            <summary>
             The socket options used by this builder.
            </summary>
            
            <returns>the socket options that will be used by this builder. You can use
             the returned object to define the initial socket options for the built
             cluster.</returns>
        </member>
        <member name="T:Cassandra.Cluster">
            <summary>
            Implementation of <see cref="T:Cassandra.ICluster"/>
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Cassandra.ICluster">
            <summary>
             Informations and known state of a Cassandra cluster. <p> This is the main
             entry point of the driver. A simple example of access to a Cassandra cluster
             would be: 
            <pre> Cluster cluster = Cluster.Builder.AddContactPoint("192.168.0.1").Build(); 
             Session session = Cluster.Connect("db1"); 
             foreach (var row in session.execute("SELECT * FROM table1")) 
               //do something ... </pre> 
             </p><p> A cluster object maintains a
             permanent connection to one of the cluster node that it uses solely to
             maintain informations on the state and current topology of the cluster. Using
             the connection, the driver will discover all the nodes composing the cluster
             as well as new nodes joining the cluster.</p>
            </summary>
        </member>
        <member name="M:Cassandra.ICluster.AllHosts">
            <summary>
             Returns all known hosts of this cluster.
            </summary>
        </member>
        <member name="M:Cassandra.ICluster.Connect">
            <summary>
             Creates a new session on this cluster.
            </summary>
            <returns>a new session on this cluster set to no keyspace.</returns>
        </member>
        <member name="M:Cassandra.ICluster.Connect(System.String)">
            <summary>
             Creates a new session on this cluster and sets a keyspace to use.
            </summary>
            <param name="keyspace"> The name of the keyspace to use for the created <c>ISession</c>. </param>
            <returns>a new session on this cluster set to keyspace: 
             <c>keyspaceName</c>. </returns>
        </member>
        <member name="M:Cassandra.ICluster.GetHost(System.Net.IPAddress)">
            <summary>
            Get the host instance for a given Ip address.
            </summary>
            <param name="address">Ip address of the host</param>
            <returns>The host or null if not found</returns>
        </member>
        <member name="M:Cassandra.ICluster.GetReplicas(System.Byte[])">
            <summary>
            Gets a collection of replicas for a given partitionKey
            </summary>
            <param name="partitionKey">Byte array representing the partition key</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.ICluster.Shutdown(System.Int32)">
            <summary>
             Shutdown this cluster instance. This closes all connections from all the
             sessions of this <c>* Cluster</c> instance and reclaim all resources
             used by it. <p> This method has no effect if the cluster was already shutdown.</p>
            </summary>
        </member>
        <member name="M:Cassandra.Cluster.BuildFrom(Cassandra.IInitializer)">
            <summary>
             Build a new cluster based on the provided initializer. <p> Note that for
             building a cluster programmatically, Cluster.NewBuilder provides a slightly less
             verbose shortcut with <link>NewBuilder#Build</link>. </p><p> Also note that that all
             the contact points provided by <c>initializer</c> must share the same
             port.</p>
            </summary>
            <param name="initializer">the Cluster.Initializer to use</param>
            <returns>the newly created Cluster instance </returns>
        </member>
        <member name="M:Cassandra.Cluster.Builder">
            <summary>
             Creates a new <link>Cluster.NewBuilder</link> instance. <p> This is a shortcut
             for <c>new Cluster.NewBuilder()</c></p>.
            </summary>
            <returns>the new cluster builder.</returns>
        </member>
        <member name="M:Cassandra.Cluster.AllHosts">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Cluster.Connect">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Cluster.Connect(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Cluster.ConnectAndCreateDefaultKeyspaceIfNotExists(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Creates new session on this cluster, and sets it to default keyspace. 
            If default keyspace does not exist then it will be created and session will be set to it.
            Name of default keyspace can be specified during creation of cluster object with <c>Cluster.Builder().WithDefaultKeyspace("keyspace_name")</c> method.
            </summary>
            <param name="replication">Replication property for this keyspace. To set it, refer to the <see cref="T:Cassandra.ReplicationStrategies"/> class methods. 
            It is a dictionary of replication property sub-options where key is a sub-option name and value is a value for that sub-option. 
            <p>Default value is <c>SimpleStrategy</c> with <c>'replication_factor' = 2</c></p></param>
            <param name="durableWrites">Whether to use the commit log for updates on this keyspace. Default is set to <c>true</c>.</param>
            <returns>a new session on this cluster set to default keyspace.</returns>
        </member>
        <member name="M:Cassandra.Cluster.GetHost(System.Net.IPAddress)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Cluster.GetReplicas(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Cluster.Shutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Cluster.Configuration">
            <summary>
             Gets the cluster configuration.
            </summary>
        </member>
        <member name="P:Cassandra.Cluster.Metadata">
            <summary>
             Gets read-only metadata on the connected cluster. <p> This includes the
             know nodes (with their status as seen by the driver) as well as the schema
             definitions.</p>
            </summary>
        </member>
        <member name="T:Cassandra.CompressionType">
            <summary>
             Compression supported by the Cassandra binary protocol.
            </summary>
        </member>
        <member name="T:Cassandra.ConsistencyLevel">
            <summary>
            Consistency refers to how up-to-date and synchronized a row of Cassandra data is on all of its replicas.
            When selecting, the consistency level specifies how many replicas must respond to a read request before returning data to the client application.
            When updating, inserting or deleting the consistency level specifies the number of replicas on which the write must succeed before returning an acknowledgment to the client application.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.Any">
            <summary>
            Writing: A write must be written to at least one node. If all replica nodes for the given row key are down, the write can still succeed after a hinted handoff has been written. If all replica nodes are down at write time, an ANY write is not readable until the replica nodes for that row have recovered.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.One">
            <summary>
            Returns a response from the closest replica, as determined by the snitch.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.Quorum">
            <summary>
            Reading: Returns the record with the most recent timestamp after a quorum of replicas has responded regardless of data center.
            Writing: A write must be written to the commit log and memory table on a quorum of replica nodes.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.All">
            <summary>
            Reading: Returns the record with the most recent timestamp after all replicas have responded. The read operation will fail if a replica does not respond.
            Writing: A write must be written to the commit log and memory table on all replica nodes in the cluster for that row.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.LocalQuorum">
            <summary>
            Reading: Returns the record with the most recent timestamp once a quorum of replicas in the current data center as the coordinator node has reported.
            Writing: A write must be written to the commit log and memory table on a quorum of replica nodes in the same data center as the coordinator node. Avoids latency of inter-data center communication.
            </summary>
        </member>
        <member name="T:Cassandra.BatchStatement">
            <summary>
            A statement that groups a number of <see cref="T:Cassandra.BoundStatement"/> and / or <see cref="T:Cassandra.SimpleStatement"/> so they get executed as a batch.
            </summary>
        </member>
        <member name="M:Cassandra.BatchStatement.SetRoutingKey(Cassandra.RoutingKey[])">
            <summary>
             Set the routing key for this query. <p> This method allows to manually
             provide a routing key for this query. It is thus optional since the routing
             key is only an hint for token aware load balancing policy but is never
             mandatory. </p><p> If the partition key for the query is composite, use the
             <link>#setRoutingKey(ByteBuffer...)</link> method instead to build the
             routing key.</p>
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose to obtain the routing key.</param>
            <returns>this <c>BatchStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.BatchStatement.Add(Cassandra.Statement)">
            <summary>
            Adds a new statement to this batch.
            Note that statement can be any <c>Statement</c>. It is allowed to mix <see cref="T:Cassandra.SimpleStatement"/> and <see cref="T:Cassandra.BoundStatement"/> in the same <c>BatchStatement</c> in particular.
            Please note that the options of the added <c>Statement</c> (all those defined directly by the Statement class: consistency level, fetch size, tracing, ...) will be ignored for the purpose of the execution of the Batch. Instead, the options used are the one of this <c>BatchStatement</c> object.
            </summary>
            <param name="statement">Statement to add to the batch</param>
            <returns>The Batch statement</returns>
        </member>
        <member name="M:Cassandra.BatchStatement.SetBatchType(Cassandra.BatchType)">
            <summary>
            Sets the <see cref="P:Cassandra.BatchStatement.BatchType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cassandra.BatchStatement.BatchType">
            <summary>
            Gets the batch type
            </summary>
        </member>
        <member name="P:Cassandra.BatchStatement.IsEmpty">
            <summary>
            Determines if the batch does not contain any query
            </summary>
        </member>
        <member name="P:Cassandra.BatchStatement.RoutingKey">
            <summary>
             Gets the routing key for the query. <p> Note that unless the routing key has been
             explicitly set through <link>#setRoutingKey</link>, this will method will
             return <c>null</c> (to avoid having to parse the query string to
             retrieve the partition key).</p>
            </summary>
        </member>
        <member name="F:Cassandra.CqlQueryTools.SelectSchemaPeers">
            <summary>
            The cql query to select the peers
            </summary>
        </member>
        <member name="F:Cassandra.CqlQueryTools.SelectSchemaLocal">
            <summary>
            The cql query to get the local schema version information
            </summary>
        </member>
        <member name="F:Cassandra.Diagnostics.CassandraTraceSwitch">
            <summary>
            Specifies what messages should be passed to the output log. 
            <para></para>   
            <para><value>TraceLevel.Off</value> - Output no tracing messages.</para>   
            <para><value>TraceLevel.Error</value>  - Output error-handling messages.</para> 
            <para><value>TraceLevel.Warning</value> - Output warnings and error-handling messages.</para>
            <para><value>TraceLevel.Info</value> - Output informational messages, warnings, and error-handling messages.</para>
            <para><value>TraceLevel.Verbose</value> - Output all debugging and tracing messages.</para>                
            </summary>
        </member>
        <member name="P:Cassandra.Diagnostics.CassandraStackTraceIncluded">
            <summary>
            Defines if exception StackTrace information should be printed by trace logger.
            <para>Default value is <value>false</value>.</para>
            </summary>
        </member>
        <member name="P:Cassandra.Diagnostics.CassandraPerformanceCountersEnabled">
            <summary>
            Defines if performance counters should be enabled.
            <para>Default value is <value>false</value>.</para>
            </summary>
        </member>
        <member name="T:Cassandra.DriverException">
            <summary>
            Top level class for exceptions thrown by the driver.
            </summary>
        </member>
        <member name="T:Cassandra.TraceRetrievalException">
            <summary>
             Exception thrown if a query trace cannot be retrieved.
            </summary>
        </member>
        <member name="T:Cassandra.Host">
            <summary>
             A Cassandra node. This class keeps the informations the driver maintain on a
             given Cassandra node.
            </summary>
        </member>
        <member name="P:Cassandra.Host.Address">
            <summary>
             Gets the node address.
            </summary>
        </member>
        <member name="P:Cassandra.Host.Datacenter">
            <summary>
             Gets the name of the datacenter this host is part of. The returned
             datacenter name is the one as known by Cassandra. Also note that it is
             possible for this information to not be available. In that case this method
             returns <c>null</c> and caller should always expect that possibility.
            </summary>
        </member>
        <member name="P:Cassandra.Host.Rack">
            <summary>
             Gets the name of the rack this host is part of. The returned rack name is
             the one as known by Cassandra. Also note that it is possible for this
             information to not be available. In that case this method returns
             <c>null</c> and caller should always expect that possibility.
            </summary>
        </member>
        <member name="T:Cassandra.HostDistance">
            <summary>
             The distance to a Cassandra node as assigned by a
             <link>com.datastax.driver.core.policies.LoadBalancingPolicy</link> (through
             its <c>* distance</c> method). The distance assigned to an host
             influence how many connections the driver maintains towards this host. If for
             a given host the assigned <c>HostDistance</c> is <c>Local</c> or
             <c>Remote</c>, some connections will be maintained by the driver to
             this host. More active connections will be kept to <c>Local</c> host
             than to a <c>Remote</c> one (and thus well behaving
             <c>LoadBalancingPolicy</c> should assign a <c>Remote</c> distance
             only to hosts that are the less often queried). <p> However, if an host is
             assigned the distance <c>Ignored</c>, no connection to that host will
             maintained active. In other words, <c>Ignored</c> should be assigned to
             hosts that should not be used by this driver (because they are in a remote
             datacenter for instance).</p>
            </summary>
        </member>
        <member name="T:Cassandra.IAuthenticator">
            <summary>
             Handles SASL authentication with Cassandra servers. A server which requires
             authentication responds to a startup message with an challenge in the form of
             an <c>AuthenticateMessage</c>. Authenticator implementations should be
             able to respond to that challenge and perform whatever authentication
             negotiation is required by the server. The exact nature of that negotiation
             is specific to the configuration of the server.
            </summary>
        </member>
        <member name="M:Cassandra.IAuthenticator.InitialResponse">
            <summary>
             Obtain an initial response token for initializing the SASL handshake
            </summary>
            
            <returns>the initial response to send to the server, may be null</returns>
        </member>
        <member name="M:Cassandra.IAuthenticator.EvaluateChallenge(System.Byte[])">
            <summary>
             Evaluate a challenge received from the Server. Generally, this method should
             return null when authentication is complete from the client perspective
            </summary>
            <param name="challenge"> the server's SASL challenge' </param>
            
            <returns>updated SASL token, may be null to indicate the client requires no
             further action</returns>
        </member>
        <member name="T:Cassandra.IAuthInfoProvider">
            <summary>
             Authentication informations provider to connect to Cassandra nodes. <p> The
             authentication information themselves are just a key-value pairs. Which exact
             key-value pairs are required depends on the authenticator set for the
             Cassandra nodes.</p>
            </summary>
            
        </member>
        <member name="M:Cassandra.IAuthInfoProvider.GetAuthInfos(System.Net.IPAddress)">
            <summary>
             The authentication informations to use to connect to <c>host</c>.
             Please note that if authentication is required, this method will be called to
             initialize each new connection created by the driver. It is thus a good idea
             to make sure this method returns relatively quickly.
            </summary>
            <param name="host"> the Cassandra host for which authentication information
             are requested. </param>
            
            <returns>The authentication informations to use.</returns>
        </member>
        <member name="T:Cassandra.IAuthProvider">
            <summary>
             Provides <link>Authenticator</link> instances for use when connecting to
             Cassandra nodes. See <link>PlainTextAuthProvider</link> and
             <link>SimpleAuthenticator</link> for an implementation which uses SASL PLAIN
             mechanism to authenticate using username/password strings
            </summary>
        </member>
        <member name="M:Cassandra.IAuthProvider.NewAuthenticator(System.Net.IPAddress)">
            <summary>
             The <c>Authenticator</c> to use when connecting to <c>host</c>
            </summary>
            <param name="host"> the Cassandra host to connect to. </param>
            <returns>The authentication implmentation to use.</returns>
        </member>
        <member name="T:Cassandra.ISession">
            <summary>
            A session holds connections to a Cassandra cluster, allowing it to be queried.
            
            Each session maintains multiple connections to the cluster nodes,
            provides policies to choose which node to use for each query (round-robin on
            all nodes of the cluster by default), and handles retries for failed query (when
            it makes sense), etc...
            
            Session instances are thread-safe and usually a single instance is enough
            per application. However, a given session can only be set to one keyspace
            at a time, so one instance per keyspace is necessary.
            </summary>
        </member>
        <member name="M:Cassandra.ISession.BeginExecute(Cassandra.IStatement,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous execute operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.BeginExecute(Cassandra.IStatement,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous execute operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.BeginExecute(System.String,Cassandra.ConsistencyLevel,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous execute operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.BeginExecute(System.String,Cassandra.ConsistencyLevel,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous execute operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.BeginPrepare(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous prepare operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.ChangeKeyspace(System.String)">
            <summary>
             Switches to the specified keyspace.
            </summary>
            <param name="keyspace_name">Name of keyspace that is to be used.</param>
        </member>
        <member name="M:Cassandra.ISession.CreateKeyspace(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
             Creates new keyspace in current cluster.        
            </summary>
            <param name="keyspace_name">Name of keyspace to be created.</param>
            <param name="replication">Replication property for this keyspace.
            To set it, refer to the <see cref="T:Cassandra.ReplicationStrategies"/> class methods. 
            It is a dictionary of replication property sub-options where key is a sub-option name and value is a value for that sub-option. 
            <p>Default value is <c>'SimpleStrategy'</c> with <c>'replication_factor' = 1</c></p></param>
            <param name="durable_writes">Whether to use the commit log for updates on this keyspace. Default is set to <c>true</c>.</param>
        </member>
        <member name="M:Cassandra.ISession.CreateKeyspaceIfNotExists(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
             Creates new keyspace in current cluster.
             If keyspace with specified name already exists, then this method does nothing.
            </summary>
            <param name="keyspace_name">Name of keyspace to be created.</param>
            <param name="replication">Replication property for this keyspace.
            To set it, refer to the <see cref="T:Cassandra.ReplicationStrategies"/> class methods. 
            It is a dictionary of replication property sub-options where key is a sub-option name and value is a value for that sub-option.
            <p>Default value is <c>'SimpleStrategy'</c> with <c>'replication_factor' = 2</c></p></param>
            <param name="durable_writes">Whether to use the commit log for updates on this keyspace. Default is set to <c>true</c>.</param>
        </member>
        <member name="M:Cassandra.ISession.DeleteKeyspace(System.String)">
            <summary>
             Deletes specified keyspace from current cluster.
             If keyspace with specified name does not exist, then exception will be thrown.
            </summary>
            <param name="keyspace_name">Name of keyspace to be deleted.</param>
        </member>
        <member name="M:Cassandra.ISession.DeleteKeyspaceIfExists(System.String)">
            <summary>
             Deletes specified keyspace from current cluster.
             If keyspace with specified name does not exist, then this method does nothing.
            </summary>
            <param name="keyspace_name">Name of keyspace to be deleted.</param>
        </member>
        <member name="M:Cassandra.ISession.EndExecute(System.IAsyncResult)">
            <summary>
            Ends asynchronous execute operation
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.ISession.EndPrepare(System.IAsyncResult)">
            <summary>
            Ends asynchronous prepare operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.Execute(Cassandra.IStatement)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Cassandra.ISession.Execute(System.String)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Cassandra.ISession.Execute(System.String,Cassandra.ConsistencyLevel)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Cassandra.ISession.Execute(System.String,System.Int32)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Cassandra.ISession.ExecuteAsync(Cassandra.IStatement)">
            <summary>
            Executes a query asynchronously
            </summary>
            <param name="query">The query to execute</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cassandra.ISession.Prepare(System.String)">
            <summary>
            Prepares the provided query string.
            </summary>
            <param name="cqlQuery">cql query to prepare</param>
        </member>
        <member name="P:Cassandra.ISession.BinaryProtocolVersion">
            <summary>
            Gets the Cassandra native binary protocol version
            </summary>
        </member>
        <member name="P:Cassandra.ISession.Cluster">
            <summary>
            Gets the cluster information and state
            </summary>
        </member>
        <member name="P:Cassandra.ISession.IsDisposed">
            <summary>
            Determines if the object has been disposed.
            </summary>
        </member>
        <member name="P:Cassandra.ISession.Keyspace">
            <summary>
            Gets name of currently used keyspace. 
            </summary>
        </member>
        <member name="T:System.IO.MemoryTributary">
            <summary>
            MemoryTributary is a re-implementation of MemoryStream that uses a dynamic list of byte arrays as a backing store, instead of a single byte 
            array, the allocation of which will fail for relatively small streams as it requires contiguous memory.
            </summary>
        </member>
        <member name="M:System.IO.MemoryTributary.ToArray">
            <summary>
            Returns the entire content of the stream as a byte array. This is not safe because the call to new byte[] may 
            fail if the stream is large enough. Where possible use methods which operate on streams directly instead.
            </summary>
            <returns>A byte[] containing the current data in the stream</returns>
        </member>
        <member name="M:System.IO.MemoryTributary.ReadFrom(System.IO.Stream,System.Int64)">
            <summary>
            Reads length bytes from source into the this instance at the current position.
            </summary>
            <param name="source">The stream containing the data to copy</param>
            <param name="length">The number of bytes to copy</param>
        </member>
        <member name="M:System.IO.MemoryTributary.WriteTo(System.IO.Stream)">
            <summary>
            Writes the entire stream into destination, regardless of Position, which remains unchanged.
            </summary>
            <param name="destination">The stream to write the content of this stream to</param>
        </member>
        <member name="P:System.IO.MemoryTributary.Block">
            <summary>
            The block of memory currently addressed by Position
            </summary>
        </member>
        <member name="P:System.IO.MemoryTributary.BlockId">
            <summary>
            The id of the block currently addressed by Position
            </summary>
        </member>
        <member name="P:System.IO.MemoryTributary.BlockOffset">
            <summary>
            The offset of the byte currently addressed by Position, into the block that contains it
            </summary>
        </member>
        <member name="T:Cassandra.Metadata">
            <summary>
             Keeps metadata on the connected cluster, including known nodes and schema
             definitions.
            </summary>
        </member>
        <member name="M:Cassandra.Metadata.AllHosts">
            <summary>
             Returns all known hosts of this cluster.
            </summary>
            
            <returns>collection of all known hosts of this cluster.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetKeyspaces">
            <summary>
             Returns a collection of all defined keyspaces names.
            </summary>
            
            <returns>a collection of all defined keyspaces names.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetKeyspace(System.String)">
            <summary>
             Returns metadata of specified keyspace.
            </summary>
            <param name="keyspace"> the name of the keyspace for which metadata should be
             returned. </param>
            
            <returns>the metadat of the requested keyspace or <c>null</c> if
             <c>* keyspace</c> is not a known keyspace.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetTables(System.String)">
            <summary>
             Returns names of all tables which are defined within specified keyspace.
            </summary>
            <param name="keyspace">the name of the keyspace for which all tables metadata should be
             returned.</param>
            <returns>an ICollection of the metadata for the tables defined in this
             keyspace.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetTable(System.String,System.String)">
            <summary>
             Returns TableMetadata for specified table in specified keyspace.
            </summary>
            <param name="keyspace">name of the keyspace within specified table is definied.</param>
            <param name="tableName">name of table for which metadata should be returned.</param>
            <returns>a TableMetadata for the specified table in the specified keyspace.</returns>
        </member>
        <member name="P:Cassandra.Metadata.ClusterName">
            <summary>
             Returns the name of currently connected cluster.
            </summary>
            
            <returns>the Cassandra name of currently connected cluster.</returns>
        </member>
        <member name="T:Cassandra.Configuration">
            <summary>
             The configuration of the cluster. This handle setting: <ul> <li>Cassandra
             binary protocol level configuration (compression).</li> <li>Connection
             pooling configurations.</li> <li>low-level tcp configuration options
             (tcpNoDelay, keepAlive, ...).</li> </ul>
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.Policies">
            <summary>
             Gets the policies set for the cluster.
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.SocketOptions">
            <summary>
             Gets the low-level tcp configuration options used (tcpNoDelay, keepAlive, ...).
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.ProtocolOptions">
            <summary>
             The Cassandra binary protocol level configuration (compression).
            </summary>
            
            <returns>the protocol options.</returns>
        </member>
        <member name="P:Cassandra.Configuration.PoolingOptions">
            <summary>
             The connection pooling configuration.
            </summary>
            
            <returns>the pooling options.</returns>
        </member>
        <member name="P:Cassandra.Configuration.ClientOptions">
            <summary>
             The .net client additional options configuration.
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.QueryOptions">
            <summary>
             The query configuration.
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.AuthProvider">
            <summary>
             The authentication provider used to connect to the Cassandra cluster.
            </summary>
            
            <returns>the authentication provider in use.</returns>
        </member>
        <member name="P:Cassandra.Configuration.AuthInfoProvider">
            <summary>
             The authentication provider used to connect to the Cassandra cluster.
            </summary>
            
            <returns>the authentication provider in use.</returns>
        </member>
        <member name="T:Cassandra.ClientOptions">
            <summary>
             Additional options of the .net Cassandra driver.
            </summary>
        </member>
        <member name="T:Cassandra.AlreadyExistsException">
            <summary>
             Exception thrown when a query attemps to create a keyspace or table that
             already exists.
            </summary>
        </member>
        <member name="T:Cassandra.QueryValidationException">
            <summary>
             An exception indicating that a query cannot be executed because it is
             incorrect syntactically, invalid, unauthorized or any other reason.
            </summary>
        </member>
        <member name="P:Cassandra.AlreadyExistsException.Keyspace">
            <summary>
             Gets the name of keyspace that either already exists or is home to the table that
             already exists.
            </summary>
        </member>
        <member name="P:Cassandra.AlreadyExistsException.Table">
            <summary>
             If the failed creation was a table creation, gets the name of the table that already exists. 
            </summary>
        </member>
        <member name="P:Cassandra.AlreadyExistsException.WasTableCreation">
            <summary>
             Gets whether the query yielding this exception was a table creation
             attempt.
            </summary>
        </member>
        <member name="T:Cassandra.AuthenticationException">
            <summary>
             Indicates an error during the authentication phase while connecting to a node.
            </summary>
        </member>
        <member name="P:Cassandra.AuthenticationException.Host">
            <summary>
             Gets the host for which the authentication failed. 
            </summary>
        </member>
        <member name="T:Cassandra.DriverInternalError">
            <summary>
             An unexpected error happened internally. This should never be raise and
             indicates a bug (either in the driver or in Cassandra).
            </summary>
        </member>
        <member name="T:Cassandra.InvalidConfigurationInQueryException">
            <summary>
             A specific invalid query exception that indicates that the query is invalid
             because of some configuration problem. <p> This is generally throw by query
             that manipulate the schema (CREATE and ALTER) when the required configuration
             options are invalid.</p>
            </summary>
        </member>
        <member name="T:Cassandra.InvalidQueryException">
            <summary>
             Indicates a syntactically correct but invalid query.
            </summary>
        </member>
        <member name="T:Cassandra.NoHostAvailableException">
            <summary>
             Exception thrown when a query cannot be performed because no host are
             available. This exception is thrown if <ul> <li>either there is no host live
             in the cluster at the moment of the query</li> <li>all host that have been
             tried have failed due to a connection problem</li> </ul> For debugging
             purpose, the list of hosts that have been tried along with the failure cause
             can be retrieved using the <link>#errors</link> method.
            </summary>
        </member>
        <member name="P:Cassandra.NoHostAvailableException.Errors">
            <summary>
             Gets the hosts tried along with descriptions of the error encountered while trying them. 
            </summary>
        </member>
        <member name="T:Cassandra.QueryExecutionException">
            <summary>
             Exception related to the execution of a query. This correspond to the
             exception that Cassandra throw when a (valid) query cannot be executed
             (TimeoutException, UnavailableException, ...).
            </summary>
        </member>
        <member name="T:Cassandra.QueryTimeoutException">
            <summary>
             A Cassandra timeout during a query. Such an exception is returned when the
             query has been tried by Cassandra but cannot be achieved with the requested
             consistency level within the rpc timeout set for Cassandra.
            </summary>
        </member>
        <member name="P:Cassandra.QueryTimeoutException.ConsistencyLevel">
            <summary>
             Gets the consistency level of the operation that time outed. 
            </summary>
        </member>
        <member name="P:Cassandra.QueryTimeoutException.ReceivedAcknowledgements">
            <summary>
            Gets the number of replica that had acknowledged/responded to the operation before it time outed. 
            </summary>
        </member>
        <member name="P:Cassandra.QueryTimeoutException.RequiredAcknowledgements">
            <summary>
             Gets the minimum number of replica acknowledgements/responses that were required to fulfill the operation. 
            </summary>
        </member>
        <member name="T:Cassandra.ReadTimeoutException">
            <summary>
             A Cassandra timeout during a read query.
            </summary>
        </member>
        <member name="T:Cassandra.SyntaxError">
            <summary>
             Indicates a syntax error in a query.
            </summary>
        </member>
        <member name="T:Cassandra.TruncateException">
            <summary>
             Error during a truncation operation.
            </summary>
        </member>
        <member name="T:Cassandra.UnauthorizedException">
            <summary>
             Indicates that a query cannot be performed due to the authorisation restrictions of the logged user.
            </summary>
        </member>
        <member name="T:Cassandra.UnavailableException">
            <summary>
             Exception thrown when the coordinator knows there is not enough replica alive
             to perform a query with the requested consistency level.
            </summary>
        </member>
        <member name="P:Cassandra.UnavailableException.Consistency">
            <summary>
             Gets the consistency level of the operation triggering this unavailable exception. 
            </summary>
        </member>
        <member name="P:Cassandra.UnavailableException.RequiredReplicas">
            <summary>
            Gets the number of replica acknowledgements/responses required to perform the operation (with its required consistency level). 
            </summary>
        </member>
        <member name="P:Cassandra.UnavailableException.AliveReplicas">
            <summary>
             Gets the number of replica that were known to be alive by the Cassandra coordinator node when it tried to execute the operation. 
            </summary>
        </member>
        <member name="T:Cassandra.WriteTimeoutException">
            <summary>
             A Cassandra timeout during a write query.
            </summary>
        </member>
        <member name="T:MurmurHash">
            <summary>
            This is a very fast, non-cryptographic hash suitable for general hash-based
            lookup. See http://murmurhash.googlepages.com/ for more details.
            Hash3_x64_128() is MurmurHash 3.0.
            
            The C version of MurmurHash 2.0 found at that site was ported to Java by
            Andrzej Bialecki (ab at getopt org).
            </summary>
        </member>
        <member name="T:Cassandra.NoneAuthProvider">
            <summary>
             A provider that provides no authentication capability. <p> This is only
             useful as a placeholder when no authentication is to be used. </p>
            </summary>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.GetTableMetadata(System.String)">
            <summary>
             Returns metadata of specified table in this keyspace.
            </summary>
            <param name="tableName"> the name of table to retrieve </param>
            
            <returns>the metadata for table <c>tableName</c> in this keyspace if it
             exists, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.GetTablesMetadata">
            <summary>
             Returns metadata of all tables defined in this keyspace.
            </summary>
            
            <returns>an IEnumerable of TableMetadata for the tables defined in this
             keyspace.</returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.GetTablesNames">
            <summary>
             Returns names of all tables defined in this keyspace.
            </summary>
            
            <returns>a collection of all, defined in this
             keyspace tables names.</returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.ExportAsString">
            <summary>
             Return a <c>String</c> containing CQL queries representing this
             name and the table it contains. In other words, this method returns the
             queries that would allow to recreate the schema of this name, along with
             all its table. Note that the returned String is formatted to be human
             readable (for some defintion of human readable at least).
            </summary>
            
            <returns>the CQL queries representing this name schema as a code
             String}.</returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.AsCqlQuery">
            <summary>
             Returns a CQL query representing this keyspace. This method returns a single
             'CREATE KEYSPACE' query with the options corresponding to this name
             definition.
            </summary>
            
            <returns>the 'CREATE KEYSPACE' query corresponding to this name.
             <see>#ExportAsString</see></returns>
        </member>
        <member name="P:Cassandra.KeyspaceMetadata.Name">
            <summary>
             Gets the name of this keyspace.
            </summary>
            
            <returns>the name of this CQL keyspace.</returns>
        </member>
        <member name="P:Cassandra.KeyspaceMetadata.DurableWrites">
            <summary>
             Gets a value indicating whether durable writes are set on this keyspace.
            </summary>
            
            <returns><c>true</c> if durable writes are set on this keyspace
             , <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Cassandra.KeyspaceMetadata.StrategyClass">
            <summary>
             Gets the Strategy Class of this keyspace.
            </summary>
            
            <returns>name of StrategyClass of this keyspace.</returns>
        </member>
        <member name="P:Cassandra.KeyspaceMetadata.Replication">
            <summary>
             Returns the replication options for this keyspace.
            </summary>
            
            <returns>a dictionary containing the keyspace replication strategy options.</returns>
        </member>
        <member name="T:Cassandra.PlainTextAuthProvider">
            <summary>
             A simple <c>AuthProvider</c> implementation. <p> This provider allows
             to programmatically define authentication information that will then apply to
             all hosts. The PlainTextAuthenticator instances it returns support SASL
             authentication using the PLAIN mechanism for version 2 of the CQL __native__
             protocol.</p>
            </summary>
        </member>
        <member name="M:Cassandra.PlainTextAuthProvider.#ctor(System.String,System.String)">
            <summary>
             Creates a new simple authentication information provider with the supplied
             credentials.
            </summary>
            <param name="username"> to use for authentication requests </param>
            <param name="password"> to use for authentication requests</param>
        </member>
        <member name="M:Cassandra.PlainTextAuthProvider.NewAuthenticator(System.Net.IPAddress)">
            <summary>
             Uses the supplied credentials and the SASL PLAIN mechanism to login to the
             server.
            </summary>
            <param name="host"> the Cassandra host with which we want to authenticate
             </param>
            
            <returns>an Authenticator instance which can be used to perform
             authentication negotiations on behalf of the client </returns>
            <throws name="SaslException"> if an unsupported SASL mechanism is supplied or
             an error is encountered when initialising the authenticator</throws>
        </member>
        <member name="T:Cassandra.PlainTextAuthProvider.PlainTextAuthenticator">
            <summary>
             Simple implementation of <link>Authenticator</link> which can perform
             authentication against Cassandra servers configured with
             PasswordAuthenticator.
            </summary>
        </member>
        <member name="T:Cassandra.ConstantReconnectionPolicy">
            <summary>
             A reconnection policy that waits a constant time between each reconnection attempt.
            </summary>
        </member>
        <member name="T:Cassandra.IReconnectionPolicy">
            <summary>
             Policy that decides how often the reconnection to a dead node is attempted.
             Each time a node is detected dead (because a connection error occurs), a new
             <c>IReconnectionSchedule</c> instance is created (through the
             <link>NewSchedule()</link>). Then each call to the
             <link>IReconnectionSchedule#NextDelayMs</link> method of this instance will
             decide when the next reconnection attempt to this node will be tried. Note
             that if the driver receives a push notification from the Cassandra cluster
             that a node is UP, any existing <c>IReconnectionSchedule</c> on that
             node will be cancelled and a new one will be created (in effect, the driver
             reset the scheduler). The default <link>ExponentialReconnectionPolicy</link>
             policy is usually adequate.
            </summary>
        </member>
        <member name="M:Cassandra.IReconnectionPolicy.NewSchedule">
            <summary>
             Creates a new schedule for reconnection attempts.
            </summary>
        </member>
        <member name="M:Cassandra.ConstantReconnectionPolicy.#ctor(System.Int64)">
            <summary>
             Creates a reconnection policy that creates with the provided constant wait
             time between reconnection attempts.
            </summary>
            <param name="constantDelayMs"> the constant delay in milliseconds to use.</param>
        </member>
        <member name="M:Cassandra.ConstantReconnectionPolicy.NewSchedule">
            <summary>
             A new schedule that uses a constant <c>ConstantDelayMs</c> delay between reconnection attempt. 
            </summary>
            
            <returns>the newly created schedule.</returns>
        </member>
        <member name="P:Cassandra.ConstantReconnectionPolicy.ConstantDelayMs">
            <summary>
            Gets the constant delay used by this reconnection policy. 
            </summary>
        </member>
        <member name="T:Cassandra.IReconnectionSchedule">
            <summary>
             Schedules reconnection attempts to a node.
            </summary>
        </member>
        <member name="M:Cassandra.IReconnectionSchedule.NextDelayMs">
            <summary>
             When to attempt the next reconnection. This method will be called once when
             the host is detected down to schedule the first reconnection attempt, and
             then once after each failed reconnection attempt to schedule the next one.
             Hence each call to this method are free to return a different value.
            </summary>
            
            <returns>a time in milliseconds to wait before attempting the next
             reconnection.</returns>
        </member>
        <member name="T:Cassandra.IRetryPolicy">
            <summary>
             A policy that defines a default behavior to adopt when a request returns a
             TimeoutException or an UnavailableException. Such policy allows to centralize
             the handling of query retries, allowing to minimize the need for exception
             catching/handling in business code.
            </summary>
        </member>
        <member name="M:Cassandra.IRetryPolicy.OnReadTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
             <p> Note that this method may be called even if <c>requiredResponses >=
             receivedResponses</c> if <c>dataPresent</c> is <c>false</c>
             (see <link>com.datastax.driver.core.exceptions.ReadTimeoutException#WasDataRetrieved</link>).</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>the retry decision. If <c>RetryDecision.Rethrow</c> is
             returned, a
             <link>com.datastax.driver.core.exceptions.ReadTimeoutException</link> will be
             thrown for the operation.</returns>
        </member>
        <member name="M:Cassandra.IRetryPolicy.OnWriteTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>the retry decision. If <c>RetryDecision.Rethrow</c> is
             returned, a
             <link>com.datastax.driver.core.exceptions.WriteTimeoutException</link> will
             be thrown for the operation.</returns>
        </member>
        <member name="M:Cassandra.IRetryPolicy.OnUnavailable(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception.
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>the retry decision. If <c>RetryDecision.Rethrow</c> is
             returned, an
             <link>com.datastax.driver.core.exceptions.UnavailableException</link> will be
             thrown for the operation.</returns>
        </member>
        <member name="T:Cassandra.ILoadBalancingPolicy">
            <summary>
             The policy that decides which Cassandra hosts to contact for each new query.
             For efficiency purposes, the policy is expected to exclude down hosts from query plans.
            </summary>
        </member>
        <member name="M:Cassandra.ILoadBalancingPolicy.Initialize(Cassandra.ICluster)">
            <summary>
             Initialize this load balancing policy. <p> Note that the driver guarantees
             that it will call this method exactly once per policy object and will do so
             before any call to another of the methods of the policy.</p>
            </summary>
            <param name="cluster"> the  information about the session instance for which the policy is created.
             </param>
        </member>
        <member name="M:Cassandra.ILoadBalancingPolicy.Distance(Cassandra.Host)">
            <summary>
             Returns the distance assigned by this policy to the provided host. <p> The
             distance of an host influence how much connections are kept to the node (see
             <link>HostDistance</link>). A policy should assign a <c>* LOCAL</c>
             distance to nodes that are susceptible to be returned first by
             <c>newQueryPlan</c> and it is useless for <c>newQueryPlan</c> to
             return hosts to which it assigns an <c>IGNORED</c> distance. </p><p> The
             host distance is primarily used to prevent keeping too many connections to
             host in remote datacenters when the policy itself always picks host in the
             local datacenter first.</p>
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            
            <returns>the HostDistance to <c>host</c>.</returns>
        </member>
        <member name="M:Cassandra.ILoadBalancingPolicy.NewQueryPlan(Cassandra.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> Each new query will call this
             method. The first host in the result will then be used to perform the query.
             In the event of a connection problem (the queried host is down or appear to
             be so), the next host will be used. If all hosts of the returned
             <c>Iterator</c> are down, the query will fail.</p>
            </summary>
            <param name="query"> the query for which to build a plan. </param>
            
            <returns>an iterator of Host. The query is tried against the hosts returned
             by this iterator in order, until the query has been sent successfully to one
             of the host.</returns>
        </member>
        <member name="T:Cassandra.DCAwareRoundRobinPolicy">
            <summary>
             A data-center aware Round-robin load balancing policy. <p> This policy
             provides round-robin queries over the node of the local datacenter. It also
             includes in the query plans returned a configurable number of hosts in the
             remote datacenters, but those are always tried after the local nodes. In
             other words, this policy guarantees that no host in a remote datacenter will
             be queried unless no host in the local datacenter can be reached. </p><p> If used
             with a single datacenter, this policy is equivalent to the
             <see cref="T:Cassandra.RoundRobinPolicy"/> policy, but its DC awareness
             incurs a slight overhead so the <see cref="T:Cassandra.RoundRobinPolicy"/>
             policy could be preferred to this policy in that case.</p>
            </summary>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.#ctor(System.String)">
            <summary>
             Creates a new datacenter aware round robin policy given the name of the local
             datacenter. <p> The name of the local datacenter provided must be the local
             datacenter name as known by Cassandra. </p><p> The policy created will ignore all
             remote hosts. In other words, this is equivalent to 
             <c>new DCAwareRoundRobinPolicy(localDc, 0)</c>.</p>
            </summary>
            <param name="localDc"> the name of the local datacenter (as known by Cassandra).</param>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.#ctor(System.String,System.Int32)">
            <summary>
             Creates a new DCAwareRoundRobin policy given the name of the local
             datacenter and that uses the provided number of host per remote
             datacenter as failover for the local hosts.
             <p>
             The name of the local datacenter provided must be the local
             datacenter name as known by Cassandra.</p>
            </summary>
             <param name="localDc"> the name of the local datacenter (as known by
             Cassandra).</param>
             <param name="usedHostsPerRemoteDc"> the number of host per remote
             datacenter that policies created by the returned factory should
             consider. Created policies <c>distance</c> method will return a
             <c>HostDistance.Remote</c> distance for only <c>
             usedHostsPerRemoteDc</c> hosts per remote datacenter. Other hosts
             of the remote datacenters will be ignored (and thus no
             connections to them will be maintained).</param>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.Distance(Cassandra.Host)">
            <summary>
             Return the HostDistance for the provided host. <p> This policy consider nodes
             in the local datacenter as <c>Local</c>. For each remote datacenter, it
             considers a configurable number of hosts as <c>Remote</c> and the rest
             is <c>Ignored</c>. </p><p> To configure how many host in each remote
             datacenter is considered <c>Remote</c>, see
             <link>#DCAwareRoundRobinPolicy(String, int)</link>.</p>
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            <returns>the HostDistance to <c>host</c>.</returns>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.NewQueryPlan(Cassandra.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> The returned plan will always
             try each known host in the local datacenter first, and then, if none of the
             local host is reacheable, will try up to a configurable number of other host
             per remote datacenter. The order of the local node in the returned query plan
             will follow a Round-robin algorithm.</p>
            </summary>
            <param name="query"> the query for which to build the plan. </param>
            <returns>a new query plan, i.e. an iterator indicating which host to try
             first for querying, which one to use as failover, etc...</returns>
        </member>
        <member name="T:Cassandra.DefaultRetryPolicy">
            <summary>
             The default retry policy. <p> This policy retries queries in only two cases:
             <ul> <li>On a read timeout, if enough replica replied but data was not
             retrieved.</li> <li>On a write timeout, if we timeout while writting the
             distributed log used by batch statements.</li> </ul> </p> <p> This retry policy is
             conservative in that it will never retry with a different consistency level
             than the one of the initial operation. </p><p> In some cases, it may be
             convenient to use a more aggressive retry policy like
             <link>DowngradingConsistencyRetryPolicy</link>.</p>
            </summary>
        </member>
        <member name="M:Cassandra.DefaultRetryPolicy.OnReadTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
             <p> This method triggers a maximum of one retry, and only if enough replica
             had responded to the read request but data was not retrieved amongst those.
             Indeed, that case usually means that enough replica are alive to satisfy the
             consistency but the coordinator picked a dead one for data retrieval, not
             having detecte that replica as dead yet. The reasoning for retrying then is
             that by the time we get the timeout the dead replica will likely have been
             detected as dead and the retry has a high change of success.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.retry(cl)</c> if no retry attempt has yet
             been tried and <c>receivedResponses >= requiredResponses &amp;&amp;
             !dataRetrieved</c>, <c>RetryDecision.rethrow()</c>
             otherwise.</returns>
        </member>
        <member name="M:Cassandra.DefaultRetryPolicy.OnWriteTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
             <p> This method triggers a maximum of one retry, and only in the case of a
             <c>WriteType.BATCH_LOG</c> write. The reasoning for the retry in that
             case is that write to the distributed batch log is tried by the coordinator
             of the write against a small subset of all the node alive in the local
             datacenter. Hence, a timeout usually means that none of the nodes in that
             subset were alive but the coordinator hasn't' detected them as dead. By the
             time we get the timeout the dead nodes will likely have been detected as dead
             and the retry has thus a high change of success.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.retry(cl)</c> if no retry attempt has yet
             been tried and <c>writeType == WriteType.BATCH_LOG</c>,
             <c>RetryDecision.rethrow()</c> otherwise.</returns>
        </member>
        <member name="M:Cassandra.DefaultRetryPolicy.OnUnavailable(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception. <p> This method never retries as a retry on an unavailable
             exception using the same consistency level has almost no change of success.</p>
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="T:Cassandra.DowngradingConsistencyRetryPolicy">
            <summary>
             A retry policy that sometimes retry with a lower consistency level than the
             one initially requested. <p> <b>BEWARE</b>: This policy may retry queries
             using a lower consistency level than the one initially requested. By doing
             so, it may break consistency guarantees. In other words, if you use this
             retry policy, there is cases (documented below) where a read at
             <c>Quorum</c> may not see a preceding write at
             <c>Quorum</c>. Do not use this policy unless you have understood the
             cases where this can happen and are OK with that. It is also highly
             recommended to always wrap this policy into <see cref="T:Cassandra.LoggingRetryPolicy"/>
             to log the occurrences of such consistency break. </p><p> This policy : the same
             retries than the <link>DefaultRetryPolicy</link> policy. But on top of that,
             it also retries in the following cases: <ul> <li>On a read timeout: if the
             number of replica that responded is greater than one but lower than is
             required by the requested consistency level, the operation is retried at a
             lower consistency level.</li> <li>On a write timeout: if the operation is an
             <c>WriteType.UNLOGGED_BATCH</c> and at least one replica acknowledged
             the write, the operation is retried at a lower consistency level.
             Furthermore, for other operation, if at least one replica acknowledged the
             write, the timeout is ignored.</li> <li>On an unavailable exception: if at
             least one replica is alive, the operation is retried at a lower consistency
             level.</li> </ul> </p><p> The reasoning behind this retry policy is the following
             one. If, based on the information the Cassandra coordinator node returns,
             retrying the operation with the initially requested consistency has a change
             to succeed, do it. Otherwise, if based on these informations we know <b>the
             initially requested consistency level cannot be achieve currently</b>, then:
             <ul> <li>For writes, ignore the exception (thus silently failing the
             consistency requirement) if we know the write has been persisted on at least
             one replica.</li> <li>For reads, try reading at a lower consistency level
             (thus silently failing the consistency requirement).</li> </ul> In other
             words, this policy : the idea that if the requested consistency level cannot
             be achieved, the next best thing for writes is to make sure the data is
             persisted, and that reading something is better than reading nothing, even if
             there is a risk of reading stale data.</p>
            </summary>
        </member>
        <member name="M:Cassandra.DowngradingConsistencyRetryPolicy.OnReadTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
             <p> This method triggers a maximum of one retry. If less replica responsed
             than required by the consistency level (but at least one replica did
             respond), the operation is retried at a lower consistency level. If enough
             replica responded but data was not retrieve, the operation is retried with
             the initial consistency level. Otherwise, an exception is thrown.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>a RetryDecision as defined above.</returns>
        </member>
        <member name="M:Cassandra.DowngradingConsistencyRetryPolicy.OnWriteTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
             <p> This method triggers a maximum of one retry. If <c>writeType ==
             WriteType.BATCH_LOG</c>, the write is retried with the initial consistency
             level. If <c>writeType == WriteType.UNLOGGED_BATCH</c> and at least one
             replica acknowleged, the write is retried with a lower consistency level
             (with unlogged batch, a write timeout can <b>always</b> mean that part of the
             batch haven't been persisted at' all, even if <c>receivedAcks > 0</c>).
             For other <c>writeType</c>, if we know the write has been persisted on
             at least one replica, we ignore the exception. Otherwise, an exception is
             thrown.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>a RetryDecision as defined above.</returns>
        </member>
        <member name="M:Cassandra.DowngradingConsistencyRetryPolicy.OnUnavailable(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception. <p> This method triggers a maximum of one retry. If at least one
             replica is know to be alive, the operation is retried at a lower consistency
             level.</p>
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>a RetryDecision as defined above.</returns>
        </member>
        <member name="T:Cassandra.ExponentialReconnectionPolicy">
            <summary>
             A reconnection policy that waits exponentially longer between each
             reconnection attempt (but keeps a constant delay once a maximum delay is
             reached).
            </summary>
        </member>
        <member name="M:Cassandra.ExponentialReconnectionPolicy.#ctor(System.Int64,System.Int64)">
            <summary>
             Creates a reconnection policy waiting exponentially longer for each new
             attempt.
            </summary>
            <param name="baseDelayMs"> the base delay in milliseconds to use for the
             schedules created by this policy.  </param>
            <param name="maxDelayMs"> the maximum delay to wait between two
             attempts.</param>
        </member>
        <member name="M:Cassandra.ExponentialReconnectionPolicy.NewSchedule">
            <summary>
             A new schedule that used an exponentially growing delay between reconnection
             attempts. <p> For this schedule, reconnection attempt <c>i</c> will be
             tried <c>Math.min(2^(i-1) * BaseDelayMs, MaxDelayMs)</c>
             milliseconds after the previous one.</p>
            </summary>
            
            <returns>the newly created schedule.</returns>
        </member>
        <member name="P:Cassandra.ExponentialReconnectionPolicy.BaseDelayMs">
            <summary>
             Gets the base delay in milliseconds for this policy (e.g. the delay before the
             first reconnection attempt).
            </summary>
        </member>
        <member name="P:Cassandra.ExponentialReconnectionPolicy.MaxDelayMs">
            <summary>
             Gets the maximum delay in milliseconds between reconnection attempts for this
             policy.
            </summary>
        </member>
        <member name="T:Cassandra.FallthroughRetryPolicy">
            <summary>
             A retry policy that never retry (nor ignore). <p> All of the methods of this
             retry policy unconditionally return
             <link>RetryPolicy.RetryDecision#rethrow</link>. If this policy is used, retry
             will have to be implemented in business code.</p>
            </summary>
        </member>
        <member name="M:Cassandra.FallthroughRetryPolicy.OnReadTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="M:Cassandra.FallthroughRetryPolicy.OnWriteTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="M:Cassandra.FallthroughRetryPolicy.OnUnavailable(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception.
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="T:Cassandra.LoggingRetryPolicy">
            <summary>
             A retry policy that wraps another policy, logging the decision made by its
             sub-policy. <p> Note that this policy only log the Ignore and Retry decisions
             (since Rethrow decisions just amount to propate the cassandra exception). The
             logging is done at the Info level.</p>
            </summary>
        </member>
        <member name="M:Cassandra.LoggingRetryPolicy.#ctor(Cassandra.IRetryPolicy)">
            <summary>
             Creates a new <c>RetryPolicy</c> that logs the decision of
             <c>policy</c>.
            </summary>
            <param name="policy"> the policy to wrap. The policy created by this
             constructor will return the same decision than <c>policy</c> but will log them.</param>
        </member>
        <member name="T:Cassandra.Policies">
            <summary>
             Policies configured for a <link>Cluster</link>
             instance.
            </summary>
        </member>
        <member name="M:Cassandra.Policies.#ctor(Cassandra.ILoadBalancingPolicy,Cassandra.IReconnectionPolicy,Cassandra.IRetryPolicy)">
            <summary>
             Creates a new <c>Policies</c> object using the provided policies.
            </summary>
            <param name="loadBalancingPolicy"> the load balancing policy to use. </param>
            <param name="reconnectionPolicy"> the reconnection policy to use. </param>
            <param name="retryPolicy"> the retry policy to use.</param>
        </member>
        <member name="P:Cassandra.Policies.DefaultLoadBalancingPolicy">
            <summary>
             The default load balancing policy. <p> The default load balancing policy is
             <link>RoundRobinPolicy</link>.</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.DefaultReconnectionPolicy">
            <summary>
             The default reconnection policy. <p> The default reconnetion policy is an
             <link>ExponentialReconnectionPolicy</link> where the base delay is 1 second
             and the max delay is 10 minutes;</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.DefaultRetryPolicy">
            <summary>
             The default retry policy. <p> The default retry policy is
             <link>DefaultRetryPolicy</link>.</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.LoadBalancingPolicy">
            <summary>
             Gets the load balancing policy in use. <p> The load balancing policy defines how
             Cassandra hosts are picked for queries.</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.ReconnectionPolicy">
            <summary>
             Gets the reconnection policy in use. <p> The reconnection policy defines how often
             the driver tries to reconnect to a dead node.</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.RetryPolicy">
            <summary>
             Gets the retry policy in use. <p> The retry policy defines in which conditions a
             query should be automatically retries by the driver.</p>
            </summary>
        </member>
        <member name="T:Cassandra.RetryDecision">
            <summary>
             A retry decision to adopt on a Cassandra exception (read/write timeout or
             unavailable exception). <p> There is three possible decision: <ul>
             <li>Rethrow: no retry should be attempted and an exception should be
             thrown</li> <li>Retry: the operation will be retried. The consistency level
             of the retry should be specified.</li> <li>Ignore: no retry should be
             attempted and the exception should be ignored. In that case, the operation
             that triggered the Cassandra exception will return an empty result set.</li></ul></p>
            </summary>
        </member>
        <member name="M:Cassandra.RetryDecision.Rethrow">
            <summary>
             Creates a Rethrow retry decision.
            </summary>
            
            <returns>a Rethrow retry decision.</returns>
        </member>
        <member name="M:Cassandra.RetryDecision.Retry(System.Nullable{Cassandra.ConsistencyLevel})">
            <summary>
             Creates a Retry retry decision using the provided consistency level.
            </summary>
            <param name="consistency"> the consistency level to use for the retry.
             </param>
            
            <returns>a Retry with consistency level <c>consistency</c> retry
             decision.</returns>
        </member>
        <member name="M:Cassandra.RetryDecision.Ignore">
            <summary>
             Creates an Ignore retry decision.
            </summary>
            
            <returns>an Ignore retry decision.</returns>
        </member>
        <member name="P:Cassandra.RetryDecision.DecisionType">
            <summary>
             Gets the type of this retry decision.
            </summary>
        </member>
        <member name="P:Cassandra.RetryDecision.RetryConsistencyLevel">
            <summary>
             Gets the consistency level for a retry decision or <c>null</c> if
             this retry decision is an <c>Ignore</c> or a
             <c>Rethrow</c>.</summary>
        </member>
        <member name="T:Cassandra.RetryDecision.RetryDecisionType">
            <summary>
             The type of retry decisions.
            </summary>
        </member>
        <member name="T:Cassandra.RoundRobinPolicy">
            <summary>
             A Round-robin load balancing policy. <p> This policy queries nodes in a
             round-robin fashion. For a given query, if an host fail, the next one
             (following the round-robin order) is tried, until all hosts have been tried.
             </p><p> This policy is not datacenter aware and will include every known
             Cassandra host in its round robin algorithm. If you use multiple datacenter
             this will be inefficient and you will want to use the
             <link>DCAwareRoundRobinPolicy</link> load balancing policy instead.</p>
            </summary>
        </member>
        <member name="M:Cassandra.RoundRobinPolicy.#ctor">
            <summary>
             Creates a load balancing policy that picks host to query in a round robin
             fashion (on all the hosts of the Cassandra cluster).
            </summary>
        </member>
        <member name="M:Cassandra.RoundRobinPolicy.Distance(Cassandra.Host)">
            <summary>
             Return the HostDistance for the provided host. <p> This policy consider all
             nodes as local. This is generally the right thing to do in a single
             datacenter deployement. If you use multiple datacenter, see
             <link>DCAwareRoundRobinPolicy</link> instead.</p>
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            
            <returns>the HostDistance to <c>host</c>.</returns>
        </member>
        <member name="M:Cassandra.RoundRobinPolicy.NewQueryPlan(Cassandra.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> The returned plan will try each
             known host of the cluster. Upon each call to this method, the ith host of the
             plans returned will cycle over all the host of the cluster in a round-robin
             fashion.</p>
            </summary>
            <param name="query"> the query for which to build the plan. </param>
            
            <returns>a new query plan, i.e. an iterator indicating which host to try
             first for querying, which one to use as failover, etc...</returns>
        </member>
        <member name="T:Cassandra.TokenAwarePolicy">
            <summary>
             A wrapper load balancing policy that add token awareness to a child policy.
             <p> This policy encapsulates another policy. The resulting policy works in
             the following way: <ul> <li>the <c>distance</c> method is inherited
             from the child policy.</li> <li>the iterator return by the
             <c>newQueryPlan</c> method will first return the <c>LOCAL</c>
             replicas for the query (based on <link>Query#getRoutingKey</link>) <i>if
             possible</i> (i.e. if the query <c>getRoutingKey</c> method doesn't
             return {@code null} and if {@link Metadata#getReplicas}' returns a non empty
             set of replicas for that partition key). If no local replica can be either
             found or successfully contacted, the rest of the query plan will fallback to
             one of the child policy.</li> </ul> </p><p> Do note that only replica for which
             the child policy <c>distance</c> method returns
             <c>HostDistance.Local</c> will be considered having priority. For
             example, if you wrap <link>DCAwareRoundRobinPolicy</link> with this token
             aware policy, replicas from remote data centers may only be returned after
             all the host of the local data center.</p>
            </summary>
        </member>
        <member name="M:Cassandra.TokenAwarePolicy.#ctor(Cassandra.ILoadBalancingPolicy)">
            <summary>
             Creates a new <c>TokenAware</c> policy that wraps the provided child
             load balancing policy.
            </summary>
            <param name="childPolicy"> the load balancing policy to wrap with token
             awareness.</param>
        </member>
        <member name="M:Cassandra.TokenAwarePolicy.Distance(Cassandra.Host)">
            <summary>
             Return the HostDistance for the provided host.
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            
            <returns>the HostDistance to <c>host</c> as returned by the wrapped
             policy.</returns>
        </member>
        <member name="M:Cassandra.TokenAwarePolicy.NewQueryPlan(Cassandra.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> The returned plan will first
             return replicas (whose <c>HostDistance</c> for the child policy is
             <c>Local</c>) for the query if it can determine them (i.e. mainly if
             <c>query.getRoutingKey()</c> is not <c>null</c>). Following what
             it will return the plan of the child policy.</p>
            </summary>
            <param name="query"> the query for which to build the plan. </param>
            
            <returns>the new query plan.</returns>
        </member>
        <member name="T:Cassandra.PoolingOptions">
            <summary>
             Options related to connection pooling. <p> The driver uses connections in an
             asynchronous way. Meaning that multiple requests can be submitted on the same
             connection at the same time. This means that the driver only needs to
             maintain a relatively small number of connections to each Cassandra host.
             These options allow to control how many connections are kept exactly. </p><p> For
             each host, the driver keeps a core amount of connections open at all time
             (<link>PoolingOptions#getCoreConnectionsPerHost</link>). If the utilisation
             of those connections reaches a configurable threshold
             (<link>PoolingOptions#getMaxSimultaneousRequestsPerConnectionTreshold</link>),
             more connections are created up to a configurable maximum number of
             connections (<link>PoolingOptions#getMaxConnectionPerHost</link>). Once more
             than core connections have been created, connections in excess are reclaimed
             if the utilisation of opened connections drops below the configured threshold
             (<link>PoolingOptions#getMinSimultaneousRequestsPerConnectionTreshold</link>).
             </p><p> Each of these parameters can be separately set for <c>Local</c> and
             <c>Remote</c> hosts (<link>HostDistance</link>). For
             <c>Ignored</c> hosts, the default for all those settings is 0 and
             cannot be changed.</p>
            </summary>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetMinSimultaneousRequestsPerConnectionTreshold(Cassandra.HostDistance)">
            <summary>
             Number of simultaneous requests on a connection below which connections in
             excess are reclaimed. <p> If an opened connection to an host at distance
             <c>distance</c> handles less than this number of simultaneous requests
             and there is more than <link>#GetCoreConnectionsPerHost</link> connections
             open to this host, the connection is closed. </p><p> The default value for this
             option is 25 for <c>Local</c> and <c>Remote</c> hosts.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.</param>
            <returns>the configured threshold, or the default one if none have been set.</returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.SetMinSimultaneousRequestsPerConnectionTreshold(Cassandra.HostDistance,System.Int32)">
            <summary>
             Sets the number of simultaneous requests on a connection below which
             connections in excess are reclaimed.
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to configure this
             threshold. </param>
            <param name="minSimultaneousRequests"> the value to set. </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetMaxSimultaneousRequestsPerConnectionTreshold(Cassandra.HostDistance)">
            <summary>
             Number of simultaneous requests on all connections to an host after which
             more connections are created. <p> If all the connections opened to an host at
             distance <c>* distance</c> connection are handling more than this
             number of simultaneous requests and there is less than
             <link>#getMaxConnectionPerHost</link> connections open to this host, a new
             connection is open. </p><p> Note that a given connection cannot handle more than
             128 simultaneous requests (protocol limitation). </p><p> The default value for
             this option is 100 for <c>Local</c> and <c>Remote</c> hosts.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.</param>
            <returns>the configured threshold, or the default one if none have been set.</returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.SetMaxSimultaneousRequestsPerConnectionTreshold(Cassandra.HostDistance,System.Int32)">
            <summary>
             Sets number of simultaneous requests on all connections to an host after
             which more connections are created.
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to configure this
             threshold. </param>
            <param name="maxSimultaneousRequests"> the value to set. </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
            <throws name="IllegalArgumentException"> if <c>distance == HostDistance.Ignore</c>.</throws>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetCoreConnectionsPerHost(Cassandra.HostDistance)">
            <summary>
             The core number of connections per host. <p> For the provided
             <c>distance</c>, this correspond to the number of connections initially
             created and kept open to each host of that distance.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.
             </param>
            
            <returns>the core number of connections per host at distance
             <c>distance</c>.</returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.SetCoreConnectionsPerHost(Cassandra.HostDistance,System.Int32)">
            <summary>
             Sets the core number of connections per host.
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to set this threshold.
             </param>
            <param name="coreConnections"> the value to set </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
            <throws name="IllegalArgumentException"> if <c>distance == HostDistance.Ignored</c>.</throws>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetMaxConnectionPerHost(Cassandra.HostDistance)">
            <summary>
             The maximum number of connections per host. <p> For the provided
             <c>distance</c>, this correspond to the maximum number of connections
             that can be created per host at that distance.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.
             </param>
            
            <returns>the maximum number of connections per host at distance
             <c>distance</c>.</returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.SetMaxConnectionsPerHost(Cassandra.HostDistance,System.Int32)">
            <summary>
             Sets the maximum number of connections per host.
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to set this threshold.
             </param>
            <param name="maxConnections"> the value to set </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
        </member>
        <member name="T:Cassandra.PreparedStatement">
            <summary>
             Represents a prepared statement, a query with bound variables that has been
             prepared (pre-parsed) by the database. <p> A prepared statement can be
             executed once concrete values has been provided for the bound variables. The
             pair of a prepared statement and values for its bound variables is a
             BoundStatement and can be executed (by <link>Session#Execute</link>).</p>
            </summary>
        </member>
        <member name="M:Cassandra.PreparedStatement.SetConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
             Sets a default consistency level for all <c>BoundStatement</c> created
             from this object. <p> If no consistency level is set through this method, the
             BoundStatement created from this object will use the default consistency
             level (One). </p><p> Changing the default consistency level is not retroactive,
             it only applies to BoundStatement created after the change.</p>
            </summary>
            <param name="consistency"> the default consistency level to set. </param>
            
            <returns>this <c>PreparedStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.PreparedStatement.SetRoutingKey(Cassandra.RoutingKey[])">
            <summary>
             Set the routing key for this query. <p> See
             <link>#setRoutingKey(ByteBuffer)</link> for more information. This method is
             a variant for when the query partition key is composite and thus the routing
             key must be built from multiple values.</p>
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose to
             obtain the routing key. </param>
            <returns>this <c>PreparedStatement</c> object.  <see>Query#GetRoutingKey</see></returns>
        </member>
        <member name="M:Cassandra.PreparedStatement.Bind(System.Object[])">
            <summary>
             Creates a new BoundStatement object and bind its variables to the provided
             values. This method is a shortcut for <c>new
             BoundStatement(this).Bind(...)</c>. <p> Note that while no more
             <c>values</c> than bound variables can be provided, it is allowed to
             provide less <c>values</c> that there is variables. In that case, the
             remaining variables will have to be bound to values by another mean because
             the resulting <c>BoundStatement</c> being executable.</p>
            </summary>
            <param name="values"> the values to bind to the variables of the newly
             created BoundStatement. </param>
            
            <returns>the newly created <c>BoundStatement</c> with its variables
             bound to <c>values</c>. </returns>
        </member>
        <member name="P:Cassandra.PreparedStatement.Variables">
            <summary>
             Gets metadata on the bounded variables of this prepared statement.
            </summary>
        </member>
        <member name="T:Cassandra.RequestHandlers.RequestHandler">
            <summary>
            Represents a handler that can get an available connection, send a request and parses the response when received.
            </summary>
        </member>
        <member name="M:Cassandra.RequestHandlers.RequestHandler.ProcessRows(Cassandra.RowSet,Cassandra.OutputRows,Cassandra.Session)">
            <summary>
            Process rows and sets the paging event handler
            </summary>
        </member>
        <member name="P:Cassandra.RequestHandlers.RequestHandler.Statement">
            <summary>
            The statement that executed the request
            </summary>
        </member>
        <member name="T:Cassandra.RequestHandlers.ExecuteQueryRequestHandler">
            <summary>
            Sends an execute request and parses the response.
            </summary>
        </member>
        <member name="P:Cassandra.RequestHandlers.ExecuteQueryRequestHandler.Id">
            <summary>
            Prepared query id
            </summary>
        </member>
        <member name="P:Cassandra.RequestHandlers.ExecuteQueryRequestHandler.CqlQuery">
            <summary>
            Gets or sets the cql query to be executed
            </summary>
        </member>
        <member name="P:Cassandra.RequestHandlers.ExecuteQueryRequestHandler.IsTracing">
            <summary>
            Determines if the request is being traced in Cassandra
            </summary>
        </member>
        <member name="T:Cassandra.RequestHandlers.QueryRequestHandler">
            <summary>
            Sends a query request and parses the response.
            </summary>
        </member>
        <member name="T:Cassandra.ProtocolOptions">
            <summary>
             Options of the Cassandra __native__ binary protocol.
            </summary>
        </member>
        <member name="F:Cassandra.ProtocolOptions.DefaultPort">
            <summary>
             The default port for Cassandra __native__ binary protocol: 9042.
            </summary>
        </member>
        <member name="M:Cassandra.ProtocolOptions.#ctor">
            <summary>
             Creates a new <c>ProtocolOptions</c> instance using the
             <c>DEFAULT_PORT</c>.
            </summary>
        </member>
        <member name="M:Cassandra.ProtocolOptions.#ctor(System.Int32)">
            <summary>
             Creates a new <c>ProtocolOptions</c> instance using the provided port.
            </summary>
            <param name="port"> the port to use for the binary protocol.</param>
        </member>
        <member name="M:Cassandra.ProtocolOptions.#ctor(System.Int32,Cassandra.SSLOptions)">
            <summary>       
            Creates a new ProtocolOptions instance using the provided port and SSL context.        
            </summary>
            <param name="port">the port to use for the binary protocol.</param>
            <param name="sslOptions">sslOptions the SSL options to use. Use null if SSL is not to be used.</param>
        </member>
        <member name="M:Cassandra.ProtocolOptions.SetCompression(Cassandra.CompressionType)">
            <summary>
             Sets the compression to use. <p> Note that while this setting can be changed
             at any time, it will only apply to newly created connections.</p>
            </summary>
            <param name="compression"> the compression algorithm to use (or <c>Compression.NONE</c> to disable compression).
             </param>
            
            <returns>this <c>ProtocolOptions</c> object.</returns>
        </member>
        <member name="P:Cassandra.ProtocolOptions.Port">
            <summary>
             The port used to connect to the Cassandra hosts.
            </summary>
            
            <returns>the port used to connect to the Cassandra hosts.</returns>
        </member>
        <member name="P:Cassandra.ProtocolOptions.SslOptions">
            <summary>
            Specified SSL options used to connect to the Cassandra hosts.
            </summary>
            
            <returns>SSL options used to connect to the Cassandra hosts.</returns>
        </member>
        <member name="P:Cassandra.ProtocolOptions.Compression">
            <summary>
             Returns the compression used by the protocol. <p> The default compression is
             <c>Compression.SNAPPY</c>.</p>
            </summary>
            <returns>the compression used.</returns>
        </member>
        <member name="T:Cassandra.QueryOptions">
            <summary>
            Options related to defaults for individual queries.
            </summary>
        </member>
        <member name="F:Cassandra.QueryOptions.DefaultConsistencyLevel">
            <summary>
            The default consistency level for queries: ConsistencyLevel.One.
            </summary>    
        </member>
        <member name="F:Cassandra.QueryOptions.DefaultSerialConsistencyLevel">
            <summary>
            The default serial consistency level for conditional updates: {@code ConsistencyLevel.Serial}.
            </summary>
        </member>
        <member name="F:Cassandra.QueryOptions.DefaultPageSize">
            <summary>
            The default page size for SELECT queries: 5000.
            </summary>
        </member>
        <member name="M:Cassandra.QueryOptions.SetConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
            Sets the default consistency level to use for queries.
            
            The consistency level set through this method will be use for queries
            that don't explicitely have a consistency level.
            </summary>
            <param name="consistencyLevel">the new consistency level to set as default.</param>
            <returns>this QueryOptions instance</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.GetConsistencyLevel">
            <summary>
             The default consistency level used by queries.
            </summary>
            <returns>the default consistency level used by queries.</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.SetSerialConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
            Sets the default serial consistency level to use for queries.
            The serial consistency level set through this method will be use for queries
            that don't explicitely have a serial consistency level.
            </summary>
            <param name="serialConsistencyLevel">the new serial consistency level to set as default.</param>
            <returns>this QueryOptions instance.</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.GetSerialConsistencyLevel">
            <summary>
            The default serial consistency level used by queries.
            </summary>
            <returns>the default serial consistency level used by queries.</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.SetPageSize(System.Int32)">
            <summary>
            Sets the default page size to use for SELECT queries.
            The page size set through this method will be use for queries
            that don't explicitely have a page size.
            </summary>
            <param name="pageSize">the new page size to set as default. It must be
            strictly positive but you can use int.MaxValue to disable paging.</param>
            <returns>this QueryOptions instance</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.GetPageSize">
            <summary>
            The default page size used by queries.
            </summary>
            <returns>the default page size used by queries.</returns> 
        </member>
        <member name="T:Cassandra.QueryTrace">
            <summary>
             The Cassandra trace for a query. <p> Such trace is generated by Cassandra
             when query tracing is enabled for the query. The trace itself is stored in
             Cassandra in the <c>sessions</c> and <c>events</c> table in the
             <c>system_traces</c> keyspace and can be retrieve manually using the
             trace identifier (the one returned by <link>#getTraceId</link>). </p><p> This
             class provides facilities to fetch the traces from Cassandra. Please note
             that the writting of the trace is done asynchronously in Cassandra. So
             accessing the trace too soon after the query may result in the trace being
             incomplete.</p>
            </summary>
        </member>
        <member name="P:Cassandra.QueryTrace.TraceId">
            <summary>
             The identifier of this trace.
            </summary>
            
            <returns>the identifier of this trace.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.RequestType">
            <summary>
             The type of request.
            </summary>
            
            <returns>the type of request. This method returns <c>null</c> if the
             request type is not yet available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.DurationMicros">
            <summary>
             The (server side) duration of the query in microseconds.
            </summary>
            
            <returns>the (server side) duration of the query in microseconds. This method
             will return <c>Integer.MIN_VALUE</c> if the duration is not yet
             available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Coordinator">
            <summary>
             The coordinator host of the query.
            </summary>
            
            <returns>the coordinator host of the query. This method returns
             <c>null</c> if the coordinator is not yet available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Parameters">
            <summary>
             The parameters attached to this trace.
            </summary>
            
            <returns>the parameters attached to this trace. This method returns
             <c>null</c> if the coordinator is not yet available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.StartedAt">
            <summary>
             The server side timestamp of the start of this query.
            </summary>
            
            <returns>the server side timestamp of the start of this query. This method
             returns 0 if the start timestamp is not available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Events">
            <summary>
             The events contained in this trace.
            </summary>
            
            <returns>the events contained in this trace.</returns>
        </member>
        <member name="T:Cassandra.QueryTrace.Event">
            <summary>
             A trace event. <p> A query trace is composed of a list of trace events.</p>
            </summary>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.Description">
            <summary>
             The event description, i.e. which activity this event correspond to.
            </summary>
            
            <returns>the event description.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.Timestamp">
            <summary>
             The server side timestamp of the event.
            </summary>
            
            <returns>the server side timestamp of the event.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.Source">
            <summary>
             The address of the host having generated this event.
            </summary>
            
            <returns>the address of the host having generated this event.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.SourceElapsedMicros">
            <summary>
             The number of microseconds elapsed on the source when this event occurred
             since when the source started handling the query.
            </summary>
            
            <returns>the elapsed time on the source host when that event happened in
             microseconds.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.ThreadName">
            <summary>
             The name of the thread on which this event occured.
            </summary>
            
            <returns>the name of the thread on which this event occured.</returns>
        </member>
        <member name="M:Cassandra.ReplicationStrategies.CreateSimpleStrategyReplicationProperty(System.Int32)">
            <summary>
             Returns replication property for SimpleStrategy.
            </summary>        
            <param name="replicationFactor">Replication factor for the whole cluster.</param>
            <returns>a dictionary of replication property sub-options.</returns>         
        </member>
        <member name="M:Cassandra.ReplicationStrategies.CreateNetworkTopologyStrategyReplicationProperty(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
             Returns replication property for NetworkTopologyStrategy.
            </summary>        
            <param name="datacentersReplicationFactors">Dictionary in which key is the name of a data-center,
            value is a replication factor for that data-center.</param>
            <returns>a dictionary of replication property sub-options.</returns>         
        </member>
        <member name="M:Cassandra.ReplicationStrategies.CreateReplicationProperty(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Returns replication property for other replication strategy. 
             Use it only if there is no dedicated method that creates replication property for specified replication strategy.
            </summary>
            <param name="strategyClass">Name of replication strategy.</param>
            <param name="subOptions">Dictionary in which key is the name of sub-option,
            value is a value for that sub-option.</param>
            <returns>a dictionary of replication property sub-options.</returns>         
        </member>
        <member name="T:Cassandra.BatchType">
            <summary>
            The type of batch to use
            </summary>
        </member>
        <member name="F:Cassandra.BatchType.Logged">
            <summary>
            A logged batch: Cassandra will first the batch to its distributed batch log to ensure the atomicity of the batch.
            </summary>
        </member>
        <member name="F:Cassandra.BatchType.Unlogged">
            <summary>
            A logged batch: Cassandra will first the batch to its distributed batch log to ensure the atomicity of the batch.
            </summary>
        </member>
        <member name="F:Cassandra.BatchType.Counter">
            <summary>
            A counter batch
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryReader.ReadInet">
            <summary>
            Reads protocol inet: Ip (4 or 16 bytes) followed by a port (int)
            </summary>
        </member>
        <member name="M:Cassandra.CassandraConnection.KillSocket">
            <summary>
            Shutdowns the underlying socket for read and writing: Testing purposes
            </summary>
        </member>
        <member name="P:Cassandra.CqlColumn.Index">
            <summary>
            Index of the column in the rowset
            </summary>
        </member>
        <member name="P:Cassandra.CqlColumn.Type">
            <summary>
            CLR Type of the column
            </summary>
        </member>
        <member name="T:Cassandra.ExecutionInfo">
            <summary>
             Basic information on the execution of a query. <p> This provides the
             following information on the execution of a (successful) query: </p> <ul> <li>The
             list of Cassandra hosts tried in order (usually just one, unless a node has
             been tried but was dead/in error or a timeout provoked a retry (which depends
             on the RetryPolicy)).</li> <li>The consistency level achieved by the query
             (usually the one asked, though some specific RetryPolicy may allow this to be
             different).</li> <li>The query trace recorded by Cassandra if tracing had
             been set for the query.</li> </ul>
            </summary>
        </member>
        <member name="T:Cassandra.RowSet">
            <summary>
            Represents a result of a query returned by Cassandra.
            </summary>
        </member>
        <member name="F:Cassandra.RowSet._pagers">
            <summary>
            Contains the PagingState keys of the pages already retrieved.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.IsExhausted">
            <summary>
            Returns whether this ResultSet has more results.
            It has side-effects, if the internal queue has been consumed it will page for more results.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.AddRow(Cassandra.Row)">
            <summary>
            Adds a row to the inner row list
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.FetchMoreResults">
            <summary>
            Force the fetching the next page of results for this result set, if any.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.FetchMoreResultsAsync">
            <summary>
            Force the fetching the next page of results without blocking for this result set, if any.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.GetAvailableWithoutFetching">
            <summary>
            The number of rows available in this row set that can be retrieved without blocking to fetch.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.GetRows">
            <summary>
            For backward compatibility: It is possible to iterate using the RowSet as it is enumerable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cassandra.RowSet.PageNext">
            <summary>
            Gets the next results and add the rows to the current rowset queue
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.Dispose">
            <summary>
            For backward compatibity only
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.FetchNextPage">
            <summary>
            Delegate that is called to get the next page.
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.RowQueue">
            <summary>
            Gets or set the internal row list. It contains the rows of the latest query page.
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.InnerQueueCount">
            <summary>
            Gets the amount of items in the internal queue. For testing purposes.
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.Info">
            <summary>
            Gets the execution info of the query
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.Columns">
            <summary>
            Gets or sets the columns in the rowset
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.PagingState">
            <summary>
            Gets or sets the paging state of the query for the rowset.
            When set it states that there are more pages.
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.IsFullyFetched">
            <summary>
            Whether all results from this result set has been fetched from the database.
            </summary>
        </member>
        <member name="T:Cassandra.Row">
            <summary>
            Represents an CQL row
            </summary>
        </member>
        <member name="M:Cassandra.Row.#ctor">
            <summary>
            Initializes a new instance of the Cassandra.Row class
            </summary>
        </member>
        <member name="M:Cassandra.Row.#ctor(System.Byte[][],Cassandra.CqlColumn[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the Cassandra.Row class
            </summary>
        </member>
        <member name="M:Cassandra.Row.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the row values from the first position to the last one.
            </summary>
        </member>
        <member name="M:Cassandra.Row.IsNull(System.String)">
            <summary>
            Determines if the value in the column is null
            </summary>
        </member>
        <member name="M:Cassandra.Row.IsNull(System.Int32)">
            <summary>
            Determines if the value in the column is null
            </summary>
        </member>
        <member name="M:Cassandra.Row.GetValue(System.Type,System.Int32)">
            <summary>
            Gets the stored value in the colum specified by index
            </summary>
            <param name="tpy">Target type</param>
            <param name="index">Index of the column</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Row.GetValue(System.Type,System.String)">
            <summary>
            Gets the stored value in the colum specified by name
            </summary>
            <param name="tpy">Target type</param>
            <param name="name">Name of the column</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Row.GetValue``1(System.Int32)">
            <summary>
            Gets the stored value in the colum specified by index
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="index">Index of the column</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Row.GetValue``1(System.String)">
            <summary>
            Gets the stored value in the colum specified by name
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="name">Name of the column</param>
            <returns></returns>
        </member>
        <member name="P:Cassandra.Row.ColumnIndexes">
            <summary>
            Gets or sets the index of the columns within the row
            </summary>
        </member>
        <member name="P:Cassandra.Row.Columns">
            <summary>
            Gets or sets the columns information
            </summary>
        </member>
        <member name="P:Cassandra.Row.Length">
            <summary>
            Gets the total amount of values inside the row
            </summary>
        </member>
        <member name="P:Cassandra.Row.Item(System.Int32)">
            <summary>
            Gets the stored value in the colum specified by index
            </summary>
        </member>
        <member name="P:Cassandra.Row.Item(System.String)">
            <summary>
            Gets the stored value in the colum specified by name
            </summary>
        </member>
        <member name="P:Cassandra.RowSetMetadata.ColumnIndexes">
            <summary>
            Gets or sets the index of the columns within the row
            </summary>
        </member>
        <member name="F:Cassandra.TypeInterpreter.Encoders">
            <summary>
            Decoders by type code
            </summary>
        </member>
        <member name="F:Cassandra.TypeInterpreter.Decoders">
            <summary>
            Decoders by type code
            </summary>
        </member>
        <member name="F:Cassandra.TypeInterpreter.DefaultTypes">
            <summary>
            Default CLR type by type code
            </summary>
        </member>
        <member name="T:Cassandra.Session">
            <summary>
            Implementation of <see cref="T:Cassandra.ISession"/>.
            </summary>
            <inheritdoc cref="T:Cassandra.ISession"/>
        </member>
        <member name="M:Cassandra.Session.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Cassandra.Session.BeginExecute(Cassandra.IStatement,System.Object,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.BeginExecute(Cassandra.IStatement,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.BeginExecute(System.String,Cassandra.ConsistencyLevel,System.Object,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.BeginExecute(System.String,Cassandra.ConsistencyLevel,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.EndExecute(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Execute(Cassandra.IStatement)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Execute(System.String,Cassandra.ConsistencyLevel)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Execute(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Execute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.ExecuteAsync(Cassandra.IStatement)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.BeginPrepare(System.String,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.EndPrepare(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Prepare(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.EndBatch(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="T:Cassandra.SimpleAuthInfoProvider">
            <summary>
             A simple <c>AuthInfoProvider</c> implementation. <p> This provider
             allows to programmatically define authentication information that will then
             apply to all hosts. </p><p> Note that it is <b>not</b> safe to add new info to
             this provider once a Cluster instance has been created using this provider.</p>
            </summary>
        </member>
        <member name="M:Cassandra.SimpleAuthInfoProvider.#ctor">
            <summary>
             Creates a new, empty, simple authentication info provider.
            </summary>
        </member>
        <member name="M:Cassandra.SimpleAuthInfoProvider.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new simple authentication info provider with the informations
             contained in <c>properties</c>.
            </summary>
            <param name="properties"> a map of authentication information to use.</param>
        </member>
        <member name="M:Cassandra.SimpleAuthInfoProvider.Add(System.String,System.String)">
            <summary>
             Adds a new property to the authentication info returned by this provider.
            </summary>
            <param name="property"> the name of the property to add. For example "username","password" etc. </param>
            <param name="value"> the value to add for <c>property</c>. </param>
            
            <returns><c>this</c> object.</returns>
        </member>
        <member name="M:Cassandra.SimpleAuthInfoProvider.AddAll(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Adds all the key-value pair provided as new authentication information
             returned by this provider.
            </summary>
            <param name="properties"> a map of authentication information to add. </param>
            
            <returns><c>this</c> object.</returns>
        </member>
        <member name="T:Cassandra.SimpleStatement">
            <summary>
             A simple <c>Statement</c> implementation built directly from a query
             string.
            </summary>
        </member>
        <member name="T:Cassandra.RegularStatement">
            <summary>
             A non-prepared CQL statement.
             This class represents a query string along with query options. This class can be extended but
             <see cref="T:Cassandra.SimpleStatement"/> is provided to build a <see cref="T:Cassandra.IStatement"/>
             directly from its query string.
            </summary>
        </member>
        <member name="P:Cassandra.RegularStatement.QueryString">
            <summary>
             Gets the query string for this statement.
            </summary>
        </member>
        <member name="M:Cassandra.SimpleStatement.#ctor(System.String)">
            <summary>
             Creates a new <c>SimpleStatement</c> with the provided query string.
            </summary>
            <param name="query"> the query string.</param>
        </member>
        <member name="M:Cassandra.SimpleStatement.SetRoutingKey(Cassandra.RoutingKey[])">
            <summary>
             Set the routing key for this query. <p> This method allows to manually
             provide a routing key for this query. It is thus optional since the routing
             key is only an hint for token aware load balancing policy but is never
             mandatory. </p><p> If the partition key for the query is composite, use the
             <link>#setRoutingKey(ByteBuffer...)</link> method instead to build the
             routing key.</p>
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose to
             obtain the routing key.
             </param>
            <returns>this <c>SimpleStatement</c> object.  <see>Query#getRoutingKey</see></returns>
        </member>
        <member name="P:Cassandra.SimpleStatement.QueryString">
            <summary>
             Gets the query string.
            </summary>
        </member>
        <member name="P:Cassandra.SimpleStatement.RoutingKey">
            <summary>
             Gets the routing key for the query. <p> Note that unless the routing key has been
             explicitly set through <link>#setRoutingKey</link>, this will method will
             return <c>null</c> (to avoid having to parse the query string to
             retrieve the partition key).</p>
            </summary>
        </member>
        <member name="M:Snappy.SnappyDecompressor.DecompressTagSlow(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
             This is a second copy of the inner loop of decompressTags used when near the
             end of the input. The key difference is the reading of the trailer bytes. The
             fast code does a blind read of the next 4 bytes as an int, and this code
             assembles the int byte-by-byte to assure that the array is not over run. The
             reason this code path is separate is the if condition to choose between these
             two seemingly small differences costs like 10-20% of the throughput. I'm
             hoping in future' versions of hot-spot this code can be integrated into the
             main loop but for now it is worth the extra maintenance pain to get the extra
             10-20%.
            </summary>
        </member>
        <member name="M:Snappy.SnappyDecompressor.IncrementalCopy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
             Copy "len" bytes from "src" to "op", one byte at a time. Used for handling
             COPY operations where the input and output regions may overlap. For example,
             suppose: src == "ab" op == src + 2 len == 20 After incrementalCopy, the
             result will have eleven copies of "ab" ababababababababababab Note that this
             does not match the semantics of either memcpy() or memmove().
            </summary>
        </member>
        <member name="M:Snappy.SnappyDecompressor.ReadUncompressedLength(System.Byte[],System.Int32)">
            <summary>
             Reads the variable length integer encoded a the specified offset, and returns
             this length with the number of bytes read.
            </summary>
        </member>
        <member name="T:Cassandra.SocketOptions">
            <summary>
             Options to configure low-level socket options for the connections kept to the
             Cassandra hosts.
            </summary>
        </member>
        <member name="T:Cassandra.SSLOptions">
            <summary>
            Defines the SSL/TLS options to connect to a ssl enabled Cassandra host
            </summary>
        </member>
        <member name="M:Cassandra.SSLOptions.#ctor">
            <summary>
             Creates SSLOptions with default values.   
            </summary>
        </member>
        <member name="M:Cassandra.SSLOptions.#ctor(System.Security.Authentication.SslProtocols,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Creates SSL options used for SSL connections with Casandra hosts. 
            </summary>
            <param name="sslProtocol">type of SSL protocol, default set to Tls.</param>
            <param name="certificateRevocation">specifies whether the certificate revocation list is checked during connection authentication.</param>
            <param name="remoteCertValidationCallback">verifies Cassandra host SSL certificate used for authentication.
                <remarks>
                    Default RemoteCertificateValidationCallback won't establish a connection if any error will occur.         
                </remarks> 
                </param>
        </member>
        <member name="P:Cassandra.SSLOptions.RemoteCertValidationCallback">
            <summary>
            Verifies Cassandra host SSL certificate used for authentication.
            </summary>
        </member>
        <member name="P:Cassandra.SSLOptions.SslProtocol">
            <summary>
            Ssl Protocol used for communication with Cassandra hosts.
            </summary>
        </member>
        <member name="P:Cassandra.TableOptions.IsCompactStorage">
            <summary>
             Whether the table uses the <c>COMPACT STORAGE</c> option.
            </summary>
            
            <returns>whether the table uses the <c>COMPACT STORAGE</c>
             option.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.Comment">
            <summary>
             The commentary set for this table.
            </summary>
            
            <returns>the commentary set for this table, or <c>null</c> if noe has
             been set.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.ReadRepairChance">
            <summary>
             The chance with which a read repair is triggered for this table.
            </summary>
            
            <returns>the read repair change set for table (in [0.0, 1.0]).</returns>
        </member>
        <member name="P:Cassandra.TableOptions.LocalReadRepairChance">
            <summary>
             The (cluster) local read repair chance set for this table.
            </summary>
            
            <returns>the local read repair change set for table (in [0.0, 1.0]).</returns>
        </member>
        <member name="P:Cassandra.TableOptions.ReplicateOnWrite">
            <summary>
             Whether replicateOnWrite is set for this table. This is only meaningful for
             tables holding counters.
            </summary>
            
            <returns>whether replicateOnWrite is set for this table.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.GcGraceSeconds">
            <summary>
             The tombstone garbage collection grace time in seconds for this table.
            </summary>
            
            <returns>the tombstone garbage collection grace time in seconds for this
             table.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.BloomFilterFpChance">
            <summary>
             The false positive chance for the bloom filter of this table.
            </summary>
            
            <returns>the bloom filter false positive chance for this table (in [0.0,
             1.0]).</returns>
        </member>
        <member name="P:Cassandra.TableOptions.Caching">
            <summary>
             The caching option for this table.
            </summary>
            
            <returns>the caching option for this table.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.CompactionOptions">
            <summary>
             The compaction options for this table.
            </summary>
            
            <returns>a dictionary containing the compaction options for this table.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.CompressionParams">
            <summary>
             The compression options for this table.
            </summary>
            
            <returns>a dictionary containing the compression options for this table.</returns>
        </member>
    </members>
</doc>
